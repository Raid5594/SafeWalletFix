{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/BlockchainData.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS, MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS, ERC20_ABI, TOKENIMPERIAL_ADDRESS, TOKENDEMOCRATIC_ADDRESS, TOKENIMPERIAL_SYMBOL, TOKENDEMOCRATIC_SYMBOL } from '../config';\nimport SmartContract from './multisigEtherWallet/SmartContract';\nimport ERC20 from './erc20/ERC20';\nimport '../css/ButtonGroup.css';\nimport { connect } from 'react-redux';\nimport { setWeb3, setMultisig, setMultisigERC, setTokenImperial, setTokenDemocratic, updateEtherBalance, updateContractBalance, updateTokenImperialBalance, updateTokenDemocraticBalance } from '../redux/actions';\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/\n\nclass BlockchainData extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateBalances = () => {\n      let etherBalance = null;\n      let contractBalance = null;\n      this.props.multisig.methods.balances(this.props.etherAddress).call({\n        from: this.props.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          contractBalance = balance;\n          this.props.web3.eth.getBalance(this.props.etherAddress, (error, balance) => {\n            if (error) {\n              console.log(error, 'Something went wrong');\n            } else {\n              etherBalance = balance;\n              console.log(etherBalance);\n              console.log('Ether', etherBalance);\n              this.setState({\n                contractBalance: contractBalance,\n                etherBalance: etherBalance\n              });\n              console.log('New etherBalance : ', this.state.etherBalance);\n              console.log('New contractBalance : ', this.state.contractBalance);\n            }\n          });\n        }\n      });\n    };\n\n    this.updateERCBalances = () => {\n      this.props.tokenImperial.methods.balanceOf(this.props.etherAddress).call({\n        from: this.props.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenImperialBalance: balance\n          });\n          console.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n        }\n      });\n      this.props.tokenDemocratic.methods.balanceOf(this.props.etherAddress).call({\n        from: this.props.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenDemocraticBalance: balance\n          });\n          console.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n        }\n      });\n      this.props.multisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENIMPERIAL_SYMBOL).call({\n        from: this.props.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenImperialContractBalance: balance\n          });\n          console.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n        }\n      });\n      this.props.multisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({\n        from: this.props.etherAddress\n      }, (error, balance) => {\n        if (error) {\n          console.log(error);\n        } else {\n          this.setState({\n            tokenDemocraticContractBalance: balance\n          });\n          console.log('The democratic token contract balance of account is: ', this.state.tokenDemocraticContractBalance);\n        }\n      });\n    };\n\n    this.onHandleClick = e => {\n      e.preventDefault();\n      var current = document.getElementsByClassName('active');\n      current[0].className = current[0].className.replace(' active', '');\n      e.target.className += ' active';\n      const name = e.target.name;\n\n      switch (name) {\n        case 'Ethereum':\n          if (this.state.Ethereum !== true) {\n            this.setState({\n              'Ethereum': true\n            });\n          }\n\n          break;\n\n        case 'ERC20':\n          if (this.state.Ethereum === true) {\n            this.setState({\n              'Ethereum': false\n            });\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    };\n\n    this.state = {\n      Ethereum: true\n    };\n  }\n\n  componentDidMount() {\n    const web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n    this.props.setWeb3(web3);\n    const multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n    this.props.setMultisig(multisig);\n    const multisigERC20 = new web3.eth.Contract(MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS);\n    this.props.setMultisigERC(multisigERC20);\n    const tokenImperial = new web3.eth.Contract(ERC20_ABI, TOKENIMPERIAL_ADDRESS);\n    this.props.setTokenImperial(tokenImperial);\n    const tokenDemocratic = new web3.eth.Contract(ERC20_ABI, TOKENDEMOCRATIC_ADDRESS);\n    this.props.setTokenDemocratic(tokenDemocratic);\n    web3.eth.getBalance(this.props.etherAddress, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.props.updateEtherBalance(balance);\n      }\n    });\n    multisig.methods.balances(this.props.etherAddress).call({\n      from: this.props.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.props.updateContractBalance(balance);\n      }\n    });\n    tokenImperial.methods.balanceOf(this.props.etherAddress).call({\n      from: this.props.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.props.updateTokenImperialBalance(balance);\n      }\n    });\n    tokenDemocratic.methods.balanceOf(this.props.etherAddress).call({\n      from: this.props.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.props.updateTokenDemocraticBalance(balance);\n      }\n    });\n    multisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENIMPERIAL_SYMBOL).call({\n      from: this.props.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.props.updateTokenImperialContractBalance(balance);\n      }\n    });\n    multisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({\n      from: this.props.etherAddress\n    }, (error, balance) => {\n      if (error) {\n        console.log(error);\n      } else {\n        this.props.updateTokenDemocraticContractBalance(balance);\n      }\n    }); //this.interval = setInterval(this.updateBalances, 1000);\n    //this.interval = setInterval(this.updateERCBalances, 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.interval);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      id: \"content\",\n      className: \"smart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"btnGroup\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"button\", {\n      className: \"buttonInGroup active\",\n      name: \"Ethereum\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Ethereum\"), React.createElement(\"button\", {\n      className: \"buttonInGroup\",\n      name: \"ERC20\",\n      onClick: this.onHandleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"ERC20\")), this.state.Ethereum ? React.createElement(SmartContract, {\n      address: this.props.etherAddress,\n      etherBalance: this.props.etherBalance,\n      contractBalance: this.props.contractBalance,\n      updateBalances: this.updateBalances,\n      web3: this.state.web3,\n      multisig: this.props.multisig,\n      multisigAddress: MULTISIG_ADDRESS,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }) : React.createElement(ERC20, {\n      web3: this.state.web3,\n      address: this.props.etherAddress,\n      tokenImperialBalance: this.props.tokenImperialBalance,\n      tokenDemocraticBalance: this.props.tokenDemocraticBalance,\n      tokenImperial: this.props.tokenImperial,\n      tokenDemocratic: this.props.tokenDemocratic,\n      multisigERC20Address: MULTISIG_ERC20_ADDRESS,\n      multisigERC20Token: this.props.multisigERC20,\n      tokenDemocraticContractBalance: this.props.tokenDemocraticContractBalance,\n      tokenImperialContractBalance: this.props.tokenImperialContractBalance,\n      updateERCBalances: this.updateERCBalances,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    etherAddress: state.data.etherAddress,\n    web3: state.data.web3,\n    multisig: state.data.multisig,\n    multisigERC20: state.data.multisigERC20,\n    tokenImperial: state.data.tokenImperial,\n    tokenDemocratic: state.data.tokenDemocratic,\n    etherBalance: state.data.etherBalance,\n    contractBalance: state.data.contractBalance,\n    tokenImperialBalance: state.data.tokenImperialBalance,\n    tokenDemocracticBalance: state.data.tokenDemocracticBalance,\n    tokenImperialContractBalance: state.data.tokenImperialContractBalance,\n    tokenDemocraticContractBalance: state.tokenDemocraticContractBalance\n  };\n}\n\nexport default connect(mapStateToProps, {\n  setWeb3,\n  setMultisig,\n  setMultisigERC,\n  setTokenImperial,\n  setTokenDemocratic,\n  updateEtherBalance,\n  updateContractBalance,\n  updateTokenImperialBalance,\n  updateTokenDemocraticBalance,\n  tokenImperialContractBalance,\n  tokenDemocraticContractBalance\n})(BlockchainData);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/BlockchainData.js"],"names":["React","Component","Web3","MULTISIG_ABI","MULTISIG_ADDRESS","MULTISIG_ERC20_ABI","MULTISIG_ERC20_ADDRESS","ERC20_ABI","TOKENIMPERIAL_ADDRESS","TOKENDEMOCRATIC_ADDRESS","TOKENIMPERIAL_SYMBOL","TOKENDEMOCRATIC_SYMBOL","SmartContract","ERC20","connect","setWeb3","setMultisig","setMultisigERC","setTokenImperial","setTokenDemocratic","updateEtherBalance","updateContractBalance","updateTokenImperialBalance","updateTokenDemocraticBalance","BlockchainData","constructor","props","updateBalances","etherBalance","contractBalance","multisig","methods","balances","etherAddress","call","from","error","balance","console","log","web3","eth","getBalance","setState","state","updateERCBalances","tokenImperial","balanceOf","tokenImperialBalance","tokenDemocratic","tokenDemocraticBalance","multisigERC20","tokenBalances","tokenImperialContractBalance","tokenDemocraticContractBalance","onHandleClick","e","preventDefault","current","document","getElementsByClassName","className","replace","target","name","Ethereum","componentDidMount","Contract","updateTokenImperialContractBalance","updateTokenDemocraticContractBalance","componentWillUnmount","clearInterval","interval","render","mapStateToProps","data","tokenDemocracticBalance"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport Web3 from 'web3';\nimport { MULTISIG_ABI, MULTISIG_ADDRESS, MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS, ERC20_ABI, \n\tTOKENIMPERIAL_ADDRESS, TOKENDEMOCRATIC_ADDRESS, TOKENIMPERIAL_SYMBOL, TOKENDEMOCRATIC_SYMBOL } from '../config';\nimport SmartContract from './multisigEtherWallet/SmartContract'; \nimport ERC20 from './erc20/ERC20';\nimport '../css/ButtonGroup.css';\nimport { connect } from 'react-redux';\nimport { setWeb3, setMultisig, setMultisigERC, \n\tsetTokenImperial, setTokenDemocratic, updateEtherBalance, \n\tupdateContractBalance, updateTokenImperialBalance, updateTokenDemocraticBalance } from '../redux/actions';\n\n\n/* Validate forms, clear data in forms, check that transaction transfer works correctly*/ \nclass BlockchainData extends Component {\n\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tEthereum: true\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\n\t\tconst web3 = new Web3('https://ropsten.infura.io/v3/a33baa265ae340c29c82373e91533edf');\n\t\tthis.props.setWeb3(web3);\n\n\t\tconst multisig = new web3.eth.Contract(MULTISIG_ABI, MULTISIG_ADDRESS);\n\t\tthis.props.setMultisig(multisig);\n\n\t\tconst multisigERC20 = new web3.eth.Contract(MULTISIG_ERC20_ABI, MULTISIG_ERC20_ADDRESS);\n\t\tthis.props.setMultisigERC(multisigERC20);\n\n\t\tconst tokenImperial = new web3.eth.Contract(ERC20_ABI, TOKENIMPERIAL_ADDRESS);\n\t\tthis.props.setTokenImperial(tokenImperial);\n\n\t\tconst tokenDemocratic = new web3.eth.Contract(ERC20_ABI, TOKENDEMOCRATIC_ADDRESS);\n\t\tthis.props.setTokenDemocratic(tokenDemocratic);\n\n\t\tweb3.eth.getBalance(this.props.etherAddress, (error, balance) => {\n\t\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.props.updateEtherBalance(balance);\n\t\t\t}\n\t\t});\n\n\t\tmultisig.methods.balances(this.props.etherAddress).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.props.updateContractBalance(balance);\n\t\t\t}\n\t\t});\n\n\t\ttokenImperial.methods.balanceOf(this.props.etherAddress).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.props.updateTokenImperialBalance(balance);\n\t\t\t}\n\t\t});\n\n\t\ttokenDemocratic.methods.balanceOf(this.props.etherAddress).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.props.updateTokenDemocraticBalance(balance);\n\t\t\t}\n\t\t});\n\n\t\tmultisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENIMPERIAL_SYMBOL).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.props.updateTokenImperialContractBalance(balance);\n\t\t\t}\n\t\t});\n\n\t\tmultisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.props.updateTokenDemocraticContractBalance(balance);\n\t\t\t}\n\t\t});\n\n\t\t//this.interval = setInterval(this.updateBalances, 1000);\n\t\t//this.interval = setInterval(this.updateERCBalances, 1000);\n\t}\n\n\tcomponentWillUnmount() {\n\t\tclearInterval(this.interval);\n\t}\n\n\tupdateBalances = () => {\n\t\tlet etherBalance = null;\n\t\tlet contractBalance = null\n\t\tthis.props.multisig.methods.balances(this.props.etherAddress).call({ from: this.props.etherAddress }, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tcontractBalance = balance;\n\t\t\t\tthis.props.web3.eth.getBalance(this.props.etherAddress, (error, balance) => {\n\t\t\t\t\tif (error) {\n\t\t\t\t\t\tconsole.log(error, 'Something went wrong');\n\t\t\t\t\t} else {\n\t\t\t\t\t\tetherBalance = balance;\n\t\t\t\t\t\tconsole.log(etherBalance);\n\t\t\t\t\t\tconsole.log('Ether',etherBalance);\n\t\t\t\t\t\tthis.setState({ contractBalance : contractBalance, etherBalance : etherBalance});\n\t\t\t\t\t\tconsole.log('New etherBalance : ', this.state.etherBalance);\n\t\t\t\t\t\tconsole.log('New contractBalance : ', this.state.contractBalance);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\tupdateERCBalances = () => {\n\t\t\n\t\tthis.props.tokenImperial.methods.balanceOf(this.props.etherAddress).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.setState({ tokenImperialBalance: balance });\n\t\t\t\tconsole.log('The token Imperial balance of account is: ', this.state.tokenImperialBalance);\n\t\t\t}\n\t\t});\n\n\t\tthis.props.tokenDemocratic.methods.balanceOf(this.props.etherAddress).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.setState({ tokenDemocraticBalance: balance });\n\t\t\t\tconsole.log('The token Democratic balance of account is: ', this.state.tokenDemocraticBalance);\n\t\t\t}\n\t\t});\n\n\t\tthis.props.multisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENIMPERIAL_SYMBOL).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.setState({ tokenImperialContractBalance: balance });\n\t\t\t\tconsole.log('The imperial token contract balance of account is: ', this.state.tokenImperialContractBalance);\n\t\t\t}\n\t\t});\n\n\t\tthis.props.multisigERC20.methods.tokenBalances(this.props.etherAddress, TOKENDEMOCRATIC_SYMBOL).call({from: this.props.etherAddress}, (error, balance) => {\n\t\t\tif (error) {\n\t\t\t\tconsole.log(error);\n\t\t\t} else {\n\t\t\t\tthis.setState({ tokenDemocraticContractBalance: balance });\n\t\t\t\tconsole.log('The democratic token contract balance of account is: ', this.state.tokenDemocraticContractBalance);\n\t\t\t}\n\t\t});\n\t}\n\n\tonHandleClick = (e) => {\n\t\te.preventDefault();\n\t\tvar current = document.getElementsByClassName('active');\n\t\tcurrent[0].className = current[0].className.replace(' active', '');\n\t\te.target.className += ' active';\n\t\tconst name = e.target.name;\n\n\t\tswitch (name) {\n\t\tcase 'Ethereum': \n\t\tif (this.state.Ethereum !== true) {\n\t\t\tthis.setState({ 'Ethereum': true });\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'ERC20': \n\t\tif (this.state.Ethereum === true) {\n\t\t\tthis.setState({ 'Ethereum': false });\n\t\t\t}\n\t\t\tbreak;   \n\t\t\tdefault:\n\t\t\tbreak;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"content\" className =\"smart\">\n\t\t\t\t<div className=\"btnGroup\">\n\t\t\t\t\t<button className=\"buttonInGroup active\" name=\"Ethereum\" onClick={this.onHandleClick}>Ethereum</button>\n\t\t\t\t\t<button className=\"buttonInGroup\" name=\"ERC20\" onClick={this.onHandleClick}>ERC20</button>\n\t\t\t\t</div>\n\t\t\t\t{\n\t\t\t\tthis.state.Ethereum ? \n\t\t\t\t<SmartContract \n\t\t\t\taddress={this.props.etherAddress} \n\t\t\t\tetherBalance={this.props.etherBalance}\n\t\t\t\tcontractBalance={this.props.contractBalance}\n\t\t\t\tupdateBalances={this.updateBalances}\n\t\t\t\tweb3={this.state.web3}\n\t\t\t\tmultisig={this.props.multisig} \n\t\t\t\tmultisigAddress={MULTISIG_ADDRESS}/>\n\t\t\t\t:\n\t\t\t\t<ERC20 \n\t\t\t\tweb3={this.state.web3}\n\t\t\t\taddress={this.props.etherAddress} \n\t\t\t\ttokenImperialBalance={this.props.tokenImperialBalance}\n\t\t\t\ttokenDemocraticBalance={this.props.tokenDemocraticBalance}\n\t\t\t\ttokenImperial={this.props.tokenImperial}\n\t\t\t\ttokenDemocratic={this.props.tokenDemocratic}\n\t\t\t\tmultisigERC20Address={MULTISIG_ERC20_ADDRESS}\n\t\t\t\tmultisigERC20Token={this.props.multisigERC20}\n\t\t\t\ttokenDemocraticContractBalance={this.props.tokenDemocraticContractBalance}\n\t\t\t\ttokenImperialContractBalance={this.props.tokenImperialContractBalance}\n\t\t\t\tupdateERCBalances={this.updateERCBalances}/>\n\t\t\t\t}\n\t\t\t</div>  \n\t\t);\n  }\n}\n\nfunction mapStateToProps(state) {\n\treturn { \n\t\tetherAddress: state.data.etherAddress,\n\t\tweb3: state.data.web3,\n\t\tmultisig: state.data.multisig,\n\t\tmultisigERC20: state.data.multisigERC20,\n\t\ttokenImperial: state.data.tokenImperial,\n\t\ttokenDemocratic: state.data.tokenDemocratic,\n\t\tetherBalance: state.data.etherBalance,\n\t\tcontractBalance: state.data.contractBalance,\n\t\ttokenImperialBalance: state.data.tokenImperialBalance,\n\t\ttokenDemocracticBalance: state.data.tokenDemocracticBalance,\n\t\ttokenImperialContractBalance: state.data.tokenImperialContractBalance,\n\t\ttokenDemocraticContractBalance: state.tokenDemocraticContractBalance\n\t};\n}\n\nexport default connect(mapStateToProps, { setWeb3, setMultisig, setMultisigERC, \n\tsetTokenImperial, setTokenDemocratic, updateEtherBalance, \n\tupdateContractBalance, updateTokenImperialBalance, updateTokenDemocraticBalance,\n\ttokenImperialContractBalance, tokenDemocraticContractBalance })(BlockchainData);\n"]},"metadata":{},"sourceType":"module"}