{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalERCSetLimit.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SetLimitFormERC from '../../presentationalComponents/SetLimitFormERC.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport BigNumber from 'bignumber.js';\n\nclass ModalERCSetLimit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'limit':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'safetyPrivateKey':\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.setDailyLimit(this.state.limit, this.state.privateKey, this.state.safetyPrivateKey);\n      document.getElementById('SetLimitERC').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.setDailyLimit = (limit, privateKey, safetyPrivateKey) => {\n      let web3 = this.props.web3;\n      let multisigERC20Token = this.props.multisigERC20Token;\n      let multisigERC20Address = this.props.multisigERC20Address;\n      let modal = this;\n      let tokenSymbol = this.props.tokenSymbol;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        multisigERC20Token.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // Build the transaction\n            web3.eth.getGasPrice().then(gasPrice => {\n              // The next few lines go around issues with big numbers\n              let x = new BigNumber(limit);\n              let val = web3.utils.fromWei(x.toString(10), 'ether');\n              let value = web3.utils.toWei(val.toString(), 'ether');\n              let msg = [{\n                type: 'address',\n                value: addrFrom\n              }, {\n                type: 'bytes32',\n                value: tokenSymbol\n              }, {\n                type: 'uint256',\n                value: value\n              }, {\n                type: 'uint256',\n                value: nonce.toString()\n              }];\n              console.log(msg);\n\n              const _message = EthCrypto.hash.keccak256(msg);\n\n              console.log(\"message: \".concat(_message));\n\n              const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n              console.log(\"signature: \".concat(_signature));\n              multisigERC20Token.methods.setDailyLimit(tokenSymbol, limit, _signature).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                  nonce: web3.utils.toHex(txCount),\n                  gasLimit: web3.utils.toHex(gasAmount),\n                  gasPrice: web3.utils.toHex(gasPrice),\n                  to: multisigERC20Address,\n                  data: multisigERC20Token.methods.setDailyLimit(tokenSymbol, limit, _signature).encodeABI()\n                };\n                console.log(txObject); // Sign the transaction\n\n                const tx = new Tx(txObject, {\n                  chain: 'ropsten',\n                  hardfork: 'petersburg'\n                });\n                tx.sign(priv);\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                console.log(rawTx); // Broadcast the transaction\n\n                web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                  console.log('Hash of transaction: ', hash);\n                  modal.setState({\n                    txHash: hash,\n                    hashReceipt: true,\n                    confirmationReceipt: false\n                  });\n                  modal.openModal();\n                }).once('confirmation', function (confNumber, receipt) {\n                  console.log('Transaction confirmation number: ', confNumber);\n                  console.log('Transaction receipt: ', receipt);\n                  modal.setState({\n                    txReceipt: receipt,\n                    confirmationReceipt: true,\n                    hashReceipt: false\n                  });\n                  modal.openModal();\n                }).on('error', function (error) {\n                  console.log(error);\n                });\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      limit: '',\n      safetyPrivateKey: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 173\n      },\n      __self: this\n    }, React.createElement(SetLimitFormERC, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default ModalERCSetLimit;","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalERCSetLimit.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","SetLimitFormERC","Transaction","Tx","EthCrypto","BigNumber","ModalERCSetLimit","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","setDailyLimit","state","limit","privateKey","safetyPrivateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","multisigERC20Token","multisigERC20Address","modal","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","getGasPrice","then","gasPrice","x","val","utils","fromWei","toString","toWei","msg","type","_message","hash","keccak256","_signature","sign","estimateGas","gas","gasAmount","txObject","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","serializedTransaction","serialize","rawTx","sendSignedTransaction","once","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SetLimitFormERC from '../../presentationalComponents/SetLimitFormERC.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport BigNumber from 'bignumber.js';\n\nclass ModalERCSetLimit extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            limit: '',\n            safetyPrivateKey: '',\n            privateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'limit': \n            if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        case 'safetyPrivateKey':\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;\n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.setDailyLimit(this.state.limit ,this.state.privateKey, this.state.safetyPrivateKey);\n        document.getElementById('SetLimitERC').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    setDailyLimit = (limit, privateKey, safetyPrivateKey) => {\n        let web3 = this.props.web3;\n        let multisigERC20Token = this.props.multisigERC20Token;\n        let multisigERC20Address = this.props.multisigERC20Address;\n        let modal = this;\n        let tokenSymbol = this.props.tokenSymbol;\n        let addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n\n        web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n            multisigERC20Token.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    // Build the transaction\n                    web3.eth.getGasPrice().then((gasPrice) => {\n\n                        // The next few lines go around issues with big numbers\n                        let x = new BigNumber(limit);\n                        let val = web3.utils.fromWei(x.toString(10), 'ether');\n                        let value = web3.utils.toWei(val.toString(), 'ether');\n                        \n                        let msg = [\n                          { type: 'address', value: addrFrom},\n                          { type: 'bytes32', value: tokenSymbol},\n                          { type: 'uint256', value: value},\n                          { type: 'uint256', value: nonce.toString()}\n                        ];\n\n                        console.log(msg);\n                        const _message = EthCrypto.hash.keccak256(msg); \n                        console.log(`message: ${_message}`);\n                        \n                        const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n                        console.log(`signature: ${_signature}`);\n                        multisigERC20Token.methods.setDailyLimit(tokenSymbol, limit, _signature).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                            console.log('Current gas price: ', gasPrice);\n                            console.log('Estimate of gas usage: ', gasAmount);\n                            const txObject = {\n                                nonce: web3.utils.toHex(txCount),\n                                gasLimit: web3.utils.toHex(gasAmount), \n                                gasPrice: web3.utils.toHex(gasPrice),\n                                to: multisigERC20Address,\n                                data: multisigERC20Token.methods.setDailyLimit(tokenSymbol, limit, _signature).encodeABI()\n                            };\n                            console.log(txObject);\n\n                            // Sign the transaction\n                            const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                            tx.sign(priv);\n\n                            const serializedTransaction = tx.serialize();\n                            const rawTx = '0x' + serializedTransaction.toString('hex');\n                            \n                            console.log(rawTx);\n\n                            // Broadcast the transaction\n                            web3.eth.sendSignedTransaction(rawTx)\n                            .once('transactionHash', function(hash){ \n                                console.log('Hash of transaction: ', hash);\n                                modal.setState({ \n                                    txHash: hash,\n                                    hashReceipt: true,\n                                    confirmationReceipt: false                       \n                                });\n                                modal.openModal();\n                            })\n                            .once('confirmation', function(confNumber, receipt){ \n                                console.log('Transaction confirmation number: ', confNumber);\n                                console.log('Transaction receipt: ', receipt);\n                                \n                                modal.setState({ \n                                    txReceipt: receipt,\n                                    confirmationReceipt: true, \n                                    hashReceipt: false\n                                });\n                                modal.openModal(); \n                            })\n                            .on('error', function(error){ console.log(error); });\n                        });\n                    });\n                }\n            });\n        });\n    } \n\n    render() {\n\n        return (\n            <span>\n                <SetLimitFormERC \n                handleSubmit={this.handleSubmit} \n                handleInputChange={this.handleInputChange}\n                errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                closeModal={this.closeModal} \n                onKeyDown={this.onKeyDown}\n                onClickAway={this.onClickAway}\n                modalRef={n => this.modalNode = n}> \n                {this.state.hashReceipt ? \n                <InitialTxHashComponent transactionHash={this.state.txHash} />\n                : null} \n                {this.state.confirmationReceipt ?\n                <ReceiptComponent\n                transactionHash={this.state.txReceipt.transactionHash}\n                blockHash={this.state.txReceipt.blockHash}\n                blockNumber={this.state.txReceipt.blockNumber}\n                gasUsed={this.state.txReceipt.gasUsed}/>\n                : null} \n\n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nexport default ModalERCSetLimit;"]},"metadata":{},"sourceType":"module"}