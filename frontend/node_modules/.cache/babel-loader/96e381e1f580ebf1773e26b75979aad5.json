{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalDepositERCSafely.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeDepositFormERC from '../../presentationalComponents/SafeDepositFormERC.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalDepositERCSafely extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToDeposit':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'safetyPubKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.deposit(this.state.amountToDeposit, this.state.safetyPubKey, this.state.privateKey);\n      document.getElementById('DepositFormSafelyERC').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.deposit = (amountToDeposit, safetyPubKey, privateKey) => {\n      const web3 = this.props.web3;\n      const updateERCBalances = this.props.updateERCBalances;\n      const tokenImperial = this.props.tokenImperial;\n      const tokenDemocratic = this.props.tokenDemocratic;\n      const multisigERC20 = this.props.multisigERC20;\n      const multisigERC20Address = this.props.multisigERC20Address;\n      const modal = this;\n      const tokenSymbol = this.props.tokenSymbol;\n      const addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex'); // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisigERC20.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // Build the transaction\n            web3.eth.getGasPrice().then(gasPrice => {\n              console.log('Current gas price: ', gasPrice);\n              multisigERC20.methods.depositFunds(safetyPubKey, tokenSymbol, amountToDeposit).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                if (error) {\n                  console.log(error);\n                } else {\n                  console.log('Estimate of gas usage: ', gasAmount);\n                  const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount),\n                    gasPrice: web3.utils.toHex(gasPrice),\n                    to: multisigERC20Address,\n                    data: multisigERC20.methods.depositFunds(safetyPubKey, tokenSymbol, amountToDeposit).encodeABI()\n                  };\n                  console.log(txObject); // Sign the transaction\n\n                  const tx = new Tx(txObject, {\n                    chain: 'ropsten',\n                    hardfork: 'petersburg'\n                  });\n                  tx.sign(priv);\n                  const serializedTransaction = tx.serialize();\n                  const rawTx = '0x' + serializedTransaction.toString('hex');\n                  console.log(rawTx); // Broadcast the transaction\n\n                  web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                    console.log('Hash of transaction: ', hash);\n                    modal.setState({\n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false\n                    });\n                    modal.openModal();\n                  }).once('confirmation', function (confNumber, receipt) {\n                    console.log('Transaction confirmation number: ', confNumber);\n                    console.log('Second receipt of transaction: ', receipt);\n                    updateERCBalances(tokenImperial, tokenDemocratic, multisigERC20);\n                    modal.setState({\n                      txReceipt: receipt,\n                      confirmationReceipt: true,\n                      hashReceipt: false\n                    });\n                    modal.openModal();\n                  }).on('error', function (error) {\n                    console.log(error);\n                  });\n                }\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      safetyPubKey: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, React.createElement(SafeDepositFormERC, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress,\n    tokenImperial: state.data.tokenImperial,\n    tokenDemocratic: state.data.tokenDemocratic,\n    multisigERC20: state.data.multisigERC20,\n    multisigERC20Address: state.data.multisigERC20Address,\n    updateERCBalances: state.data.updateBalancesERC,\n    tokenSymbol: state.data.chosenTokenSymbol\n  };\n}\n\nexport default connect(mapStateToProps)(ModalDepositERCSafely);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalDepositERCSafely.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","SafeDepositFormERC","Transaction","Tx","connect","ModalDepositERCSafely","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","deposit","state","amountToDeposit","safetyPubKey","privateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","updateERCBalances","tokenImperial","tokenDemocratic","multisigERC20","multisigERC20Address","modal","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","getGasPrice","then","gasPrice","depositFunds","estimateGas","gas","gasAmount","txObject","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed","mapStateToProps","etherAddress","updateBalancesERC","chosenTokenSymbol"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeDepositFormERC from '../../presentationalComponents/SafeDepositFormERC.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalDepositERCSafely extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            safetyPubKey: '',\n            privateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'amountToDeposit': \n            if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;\n        case 'safetyPubKey':\n            if (event.target.validity.tooShort) {\n              event.target.setCustomValidity('Public key has to be 42 characters');\n            } else if (event.target.validity.patternMismatch) {\n              event.target.setCustomValidity('Public key has to start with \"0x\"');\n            } else {\n              event.target.setCustomValidity('');\n            } \n            break;    \n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.deposit(this.state.amountToDeposit, this.state.safetyPubKey, this.state.privateKey);\n        document.getElementById('DepositFormSafelyERC').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true \n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    deposit = (amountToDeposit, safetyPubKey, privateKey) => {\n    \n        const web3 = this.props.web3;\n        const updateERCBalances = this.props.updateERCBalances;\n        const tokenImperial = this.props.tokenImperial;\n        const tokenDemocratic = this.props.tokenDemocratic;\n        const multisigERC20 = this.props.multisigERC20;\n        const multisigERC20Address = this.props.multisigERC20Address;\n        const modal = this;\n        const tokenSymbol = this.props.tokenSymbol;\n        const addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n\n        // Getting Ethereum transaction count\n        web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n            // Retrieving the current nonce inside the contract\n            multisigERC20.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    \n                    // Build the transaction\n                    web3.eth.getGasPrice().then((gasPrice) => {\n                        console.log('Current gas price: ', gasPrice);    \n                        multisigERC20.methods.depositFunds(safetyPubKey, tokenSymbol, amountToDeposit).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                            if (error) {\n                                console.log(error);\n                                \n                            } else {\n                                console.log('Estimate of gas usage: ', gasAmount);\n                                \n                                const txObject = {\n                                    nonce: web3.utils.toHex(txCount),\n                                    gasLimit: web3.utils.toHex(gasAmount), \n                                    gasPrice: web3.utils.toHex(gasPrice),\n                                    to: multisigERC20Address,\n                                    data: multisigERC20.methods.depositFunds(safetyPubKey, tokenSymbol, amountToDeposit).encodeABI()\n                                };\n                                console.log(txObject);\n\n                                // Sign the transaction\n                                const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                                tx.sign(priv);\n\n                                const serializedTransaction = tx.serialize();\n                                const rawTx = '0x' + serializedTransaction.toString('hex');\n                                \n                                console.log(rawTx);\n                                \n                                // Broadcast the transaction\n                                web3.eth.sendSignedTransaction(rawTx)\n                                .once('transactionHash', function(hash){ \n                                    console.log('Hash of transaction: ', hash);\n                                    modal.setState({ \n                                      txHash: hash,\n                                      hashReceipt: true,\n                                      confirmationReceipt: false                       \n                                    });\n                                    modal.openModal();\n                                })\n                                .once('confirmation', function(confNumber, receipt){ \n                                    console.log('Transaction confirmation number: ', confNumber);\n                                    console.log('Second receipt of transaction: ', receipt);\n                                    \n                                    updateERCBalances(tokenImperial, tokenDemocratic, multisigERC20);\n\n                                    modal.setState({ \n                                      txReceipt: receipt,\n                                      confirmationReceipt: true, \n                                      hashReceipt: false\n                                    });\n                                    modal.openModal(); \n                                })\n                                .on('error', function(error){ console.log(error); });\n                            }\n                        });\n                    });\n                }\n            });\n        });\n    } \n\n    render() {\n\n    return (\n        <span>\n            <SafeDepositFormERC \n            handleSubmit={this.handleSubmit} \n            handleInputChange={this.handleInputChange}\n            errors={this.state.errors}/>\n            {\n            this.state.isOpen && \n            <ModalContent \n            closeModal={this.closeModal} \n            onKeyDown={this.onKeyDown}\n            onClickAway={this.onClickAway}\n            modalRef={n => this.modalNode = n}> \n            {this.state.hashReceipt ? \n            <InitialTxHashComponent transactionHash={this.state.txHash} />\n            : null} \n            {this.state.confirmationReceipt ?\n            <ReceiptComponent\n            transactionHash={this.state.txReceipt.transactionHash}\n            blockHash={this.state.txReceipt.blockHash}\n            blockNumber={this.state.txReceipt.blockNumber}\n            gasUsed={this.state.txReceipt.gasUsed}/>\n            : null} \n            </ModalContent>\n            }\n        </span>\n    );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress,\n        tokenImperial: state.data.tokenImperial,\n        tokenDemocratic: state.data.tokenDemocratic,\n        multisigERC20: state.data.multisigERC20,\n        multisigERC20Address: state.data.multisigERC20Address,\n        updateERCBalances: state.data.updateBalancesERC,\n        tokenSymbol: state.data.chosenTokenSymbol\n    };\n}\n\nexport default connect(mapStateToProps)(ModalDepositERCSafely);"]},"metadata":{},"sourceType":"module"}