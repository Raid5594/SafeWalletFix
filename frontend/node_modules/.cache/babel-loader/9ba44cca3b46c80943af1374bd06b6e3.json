{"ast":null,"code":"import { SPECIFY_ADDRESS, SET_WEB3, SET_MULTISIG_CONTRACT, SET_MULTISIG_ERC_CONTRACT, SET_TOKEN_IMPERIAL, SET_TOKEN_DEMOCRATIC, UPDATE_ETHER_BALANCE, UPDATE_CONTRACT_BALANCE } from '../actionTypes';\nconst initialState = {\n  web3: '',\n  multisig: '',\n  multisigERC20: '',\n  etherAddress: '',\n  etherBalance: '',\n  contractBalance: '',\n  tokenImperial: '',\n  tokenDemocratic: '',\n  tokenImperialBalance: '',\n  tokenDemocraticContractBalance: '',\n  tokenImperialContractBalance: '',\n  login: false\n};\nexport default function handlingActions(state = initialState, action) {\n  switch (action.type) {\n    case SPECIFY_ADDRESS:\n      return Object.assign({}, state, {\n        etherAddress: action.payload,\n        login: true\n      });\n\n    case SET_WEB3:\n      return Object.assign({}, state, {\n        web3: action.payload\n      });\n\n    case SET_MULTISIG_CONTRACT:\n      return Object.assign({}, state, {\n        multisig: action.payload\n      });\n\n    case SET_MULTISIG_ERC_CONTRACT:\n      return Object.assign({}, state, {\n        multisigERC20: action.payload\n      });\n\n    case SET_TOKEN_IMPERIAL:\n      return Object.assign({}, state, {\n        tokenImperial: action.payload\n      });\n\n    case SET_TOKEN_DEMOCRATIC:\n      return Object.assign({}, state, {\n        tokenDemocratic: action.payload\n      });\n\n    case UPDATE_ETHER_BALANCE:\n      return Object.assign({}, state, {\n        etherBalance: action.payload\n      });\n\n    case UPDATE_CONTRACT_BALANCE:\n      return Object.assign({}, state, {\n        contractBalance: action.payload\n      });\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/redux/reducers/reducers.js"],"names":["SPECIFY_ADDRESS","SET_WEB3","SET_MULTISIG_CONTRACT","SET_MULTISIG_ERC_CONTRACT","SET_TOKEN_IMPERIAL","SET_TOKEN_DEMOCRATIC","UPDATE_ETHER_BALANCE","UPDATE_CONTRACT_BALANCE","initialState","web3","multisig","multisigERC20","etherAddress","etherBalance","contractBalance","tokenImperial","tokenDemocratic","tokenImperialBalance","tokenDemocraticContractBalance","tokenImperialContractBalance","login","handlingActions","state","action","type","Object","assign","payload"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,QAA1B,EAAoCC,qBAApC,EAA2DC,yBAA3D,EAAsFC,kBAAtF,EAA0GC,oBAA1G,EAAgIC,oBAAhI,EAAsJC,uBAAtJ,QAAqL,gBAArL;AAEA,MAAMC,YAAY,GAAG;AACpBC,EAAAA,IAAI,EAAE,EADc;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,aAAa,EAAE,EAHK;AAIpBC,EAAAA,YAAY,EAAE,EAJM;AAKpBC,EAAAA,YAAY,EAAE,EALM;AAMpBC,EAAAA,eAAe,EAAE,EANG;AAOpBC,EAAAA,aAAa,EAAE,EAPK;AAQpBC,EAAAA,eAAe,EAAE,EARG;AASpBC,EAAAA,oBAAoB,EAAE,EATF;AAUpBC,EAAAA,8BAA8B,EAAE,EAVZ;AAWpBC,EAAAA,4BAA4B,EAAE,EAXV;AAYpBC,EAAAA,KAAK,EAAE;AAZa,CAArB;AAeA,eAAe,SAASC,eAAT,CAAyBC,KAAK,GAAGd,YAAjC,EAA+Ce,MAA/C,EAAuD;AACrE,UAAQA,MAAM,CAACC,IAAf;AACG,SAAKxB,eAAL;AACF,aAAOyB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BV,QAAAA,YAAY,EAAEW,MAAM,CAACI,OADU;AAE/BP,QAAAA,KAAK,EAAE;AAFwB,OAAzB,CAAP;;AAID,SAAKnB,QAAL;AACC,aAAOwB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/Bb,QAAAA,IAAI,EAAEc,MAAM,CAACI;AADkB,OAAzB,CAAP;;AAGD,SAAKzB,qBAAL;AACC,aAAOuB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BZ,QAAAA,QAAQ,EAAEa,MAAM,CAACI;AADc,OAAzB,CAAP;;AAGD,SAAKxB,yBAAL;AACC,aAAOsB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BX,QAAAA,aAAa,EAAEY,MAAM,CAACI;AADS,OAAzB,CAAP;;AAGD,SAAKvB,kBAAL;AACC,aAAOqB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BP,QAAAA,aAAa,EAAEQ,MAAM,CAACI;AADS,OAAzB,CAAP;;AAGD,SAAKtB,oBAAL;AACC,aAAOoB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BN,QAAAA,eAAe,EAAEO,MAAM,CAACI;AADO,OAAzB,CAAP;;AAGD,SAAKrB,oBAAL;AACC,aAAOmB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BT,QAAAA,YAAY,EAAEU,MAAM,CAACI;AADU,OAAzB,CAAP;;AAGD,SAAKpB,uBAAL;AACC,aAAOkB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,KAAlB,EAAyB;AAC/BR,QAAAA,eAAe,EAAES,MAAM,CAACI;AADO,OAAzB,CAAP;;AAGE;AACE,aAAOL,KAAP;AAnCL;AAqCA","sourcesContent":["import { SPECIFY_ADDRESS, SET_WEB3, SET_MULTISIG_CONTRACT, SET_MULTISIG_ERC_CONTRACT, SET_TOKEN_IMPERIAL, SET_TOKEN_DEMOCRATIC, UPDATE_ETHER_BALANCE, UPDATE_CONTRACT_BALANCE } from '../actionTypes';\n\nconst initialState = {\n\tweb3: '',\n\tmultisig: '',\n\tmultisigERC20: '',\n\tetherAddress: '',\n\tetherBalance: '',\n\tcontractBalance: '',\n\ttokenImperial: '',\n\ttokenDemocratic: '',\n\ttokenImperialBalance: '',\n\ttokenDemocraticContractBalance: '',\n\ttokenImperialContractBalance: '',\n\tlogin: false\n};\n\nexport default function handlingActions(state = initialState, action) {\n\tswitch (action.type) {\n    case SPECIFY_ADDRESS:\n\t\treturn Object.assign({}, state, {\n\t\t\tetherAddress: action.payload,\n\t\t\tlogin: true\n\t\t});\n\tcase SET_WEB3:\n\t\treturn Object.assign({}, state, {\n\t\t\tweb3: action.payload\n\t\t});\n\tcase SET_MULTISIG_CONTRACT:\n\t\treturn Object.assign({}, state, {\n\t\t\tmultisig: action.payload\n\t\t});\n\tcase SET_MULTISIG_ERC_CONTRACT:\n\t\treturn Object.assign({}, state, {\n\t\t\tmultisigERC20: action.payload\n\t\t});\t\n\tcase SET_TOKEN_IMPERIAL:\n\t\treturn Object.assign({}, state, {\n\t\t\ttokenImperial: action.payload\n\t\t});\n\tcase SET_TOKEN_DEMOCRATIC:\n\t\treturn Object.assign({}, state, {\n\t\t\ttokenDemocratic: action.payload\n\t\t});\n\tcase UPDATE_ETHER_BALANCE:\n\t\treturn Object.assign({}, state, {\n\t\t\tetherBalance: action.payload\n\t\t});\n\tcase UPDATE_CONTRACT_BALANCE:\n\t\treturn Object.assign({}, state, {\n\t\t\tcontractBalance: action.payload\n\t\t});\n    default:\n      return state;\n\t}\n}"]},"metadata":{},"sourceType":"module"}