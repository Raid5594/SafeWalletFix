{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalRecoverERCSafely.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeRecoveryFormERC from '../../presentationalComponents/SafeRecoveryFormERC.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalRecoverERCSafely extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'ownerPublic':\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.recoverFundsToSafeAddress(this.state.ownerPublic, this.state.recipientAddress, this.state.amountToTransfer, this.state.privateKey);\n      document.getElementById('RecoverSafelyERC').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.recoverFundsToSafeAddress = (ownerPublic, recipientAddress, amountToTransfer, privateKey) => {\n      const web3 = this.props.web3;\n      const tokenImperial = this.props.tokenImperial;\n      const tokenDemocratic = this.props.tokenDemocratic;\n      const multisigERC20 = this.props.multisigERC20;\n      const multisigERC20Address = this.props.multisigERC20Address;\n      const modal = this;\n      const updateERCBalances = this.props.updateERCBalances;\n      const tokenSymbol = this.props.tokenSymbol;\n      const addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Build the transaction\n        web3.eth.getGasPrice().then(gasPrice => {\n          multisigERC20.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).estimateGas({\n            gas: gasPrice,\n            from: addrFrom\n          }, function (error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(gasAmount * 2),\n              // Estimate is not always correct\n              gasPrice: web3.utils.toHex(gasPrice),\n              // Pay Higher Price for testing purposes\n              to: multisigERC20Address,\n              data: multisigERC20.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).encodeABI()\n            };\n            console.log(txObject); // Sign the transaction\n\n            const tx = new Tx(txObject, {\n              chain: 'ropsten',\n              hardfork: 'petersburg'\n            });\n            tx.sign(priv);\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            console.log(rawTx); // Broadcast the transaction\n\n            web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n              console.log('Hash of transaction: ', hash);\n              modal.setState({\n                txHash: hash,\n                hashReceipt: true,\n                confirmationReceipt: false\n              });\n              modal.openModal();\n            }).once('confirmation', function (confNumber, receipt) {\n              console.log('Transaction confirmation number: ', confNumber);\n              console.log('Transaction receipt: ', receipt);\n              updateERCBalances(tokenImperial, tokenDemocratic, multisigERC20);\n              modal.setState({\n                txReceipt: receipt,\n                confirmationReceipt: true,\n                hashReceipt: false\n              });\n              modal.openModal();\n            }).on('error', function (error) {\n              console.log(error);\n            });\n          });\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      ownerPublic: '',\n      recipientAddress: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(SafeRecoveryFormERC, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress,\n    tokenImperial: state.data.tokenImperial,\n    tokenDemocratic: state.data.tokenDemocratic,\n    multisigERC20: state.data.multisigERC20,\n    multisigERC20Address: state.data.multisigERC20Address,\n    updateERCBalances: state.data.updateBalancesERC,\n    tokenSymbol: state.data.chosenTokenSymbol\n  };\n}\n\nexport default connect(mapStateToProps)(ModalRecoverERCSafely);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalRecoverERCSafely.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","SafeRecoveryFormERC","Transaction","Tx","connect","ModalRecoverERCSafely","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","recoverFundsToSafeAddress","state","ownerPublic","recipientAddress","amountToTransfer","privateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","tokenImperial","tokenDemocratic","multisigERC20","multisigERC20Address","modal","updateERCBalances","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","getGasPrice","then","gasPrice","methods","estimateGas","gas","error","gasAmount","console","log","txObject","nonce","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed","mapStateToProps","etherAddress","updateBalancesERC","chosenTokenSymbol"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeRecoveryFormERC from '../../presentationalComponents/SafeRecoveryFormERC.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalRecoverERCSafely extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            amountToTransfer: '',\n            ownerPublic: '',\n            recipientAddress: '',\n            privateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'amountToTransfer': \n            if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        case 'ownerPublic':\n        case 'recipientAddress':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Public key has to be 42 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Public key has to start with \"0x\"');\n            } else {\n                event.target.setCustomValidity('');\n            }     \n            break;\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;  \n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.recoverFundsToSafeAddress(this.state.ownerPublic, this.state.recipientAddress, this.state.amountToTransfer, this.state.privateKey);\n        document.getElementById('RecoverSafelyERC').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false \n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    recoverFundsToSafeAddress = (ownerPublic, recipientAddress, amountToTransfer, privateKey) => {\n        const web3 = this.props.web3;\n        const tokenImperial = this.props.tokenImperial;\n        const tokenDemocratic = this.props.tokenDemocratic;\n        const multisigERC20 = this.props.multisigERC20;\n        const multisigERC20Address = this.props.multisigERC20Address;\n        const modal = this;\n        const updateERCBalances = this.props.updateERCBalances;\n        const tokenSymbol = this.props.tokenSymbol;\n        const addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n\n        web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n            // Build the transaction\n            web3.eth.getGasPrice().then((gasPrice) => {\n\n                multisigERC20.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                    console.log('Current gas price: ', gasPrice);\n                    console.log('Estimate of gas usage: ', gasAmount);\n                    const txObject = {\n                        nonce: web3.utils.toHex(txCount),\n                        gasLimit: web3.utils.toHex(gasAmount*2), // Estimate is not always correct\n                        gasPrice: web3.utils.toHex(gasPrice), // Pay Higher Price for testing purposes\n                        to: multisigERC20Address,\n                        data: multisigERC20.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, tokenSymbol, amountToTransfer).encodeABI()\n                    };\n                    console.log(txObject);\n\n                    // Sign the transaction\n                    const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                    tx.sign(priv);\n\n                    const serializedTransaction = tx.serialize();\n                    const rawTx = '0x' + serializedTransaction.toString('hex');\n                    \n                    console.log(rawTx);\n\n                    // Broadcast the transaction\n                    web3.eth.sendSignedTransaction(rawTx)\n                    .once('transactionHash', function(hash){ \n                        console.log('Hash of transaction: ', hash);\n                        modal.setState({ \n                            txHash: hash,\n                            hashReceipt: true,\n                            confirmationReceipt: false                       \n                        });\n                        modal.openModal();\n                    })\n                    .once('confirmation', function(confNumber, receipt){ \n                        console.log('Transaction confirmation number: ', confNumber);\n                        console.log('Transaction receipt: ', receipt);\n                        \n                        updateERCBalances(tokenImperial, tokenDemocratic, multisigERC20);\n                        \n                        modal.setState({ \n                            txReceipt: receipt,\n                            confirmationReceipt: true, \n                            hashReceipt: false\n                        });\n                        modal.openModal(); \n                    })\n                    .on('error', function(error){ console.log(error); });\n                });\n            });\n        });\n    } \n\n    render() {\n\n        return (\n            <span>\n                <SafeRecoveryFormERC \n                handleSubmit={this.handleSubmit} \n                handleInputChange={this.handleInputChange}\n                errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                closeModal={this.closeModal} \n                onKeyDown={this.onKeyDown}\n                onClickAway={this.onClickAway}\n                modalRef={n => this.modalNode = n}> \n                {this.state.hashReceipt ? \n                <InitialTxHashComponent transactionHash={this.state.txHash} />\n                : null} \n                {this.state.confirmationReceipt ?\n                <ReceiptComponent\n                transactionHash={this.state.txReceipt.transactionHash}\n                blockHash={this.state.txReceipt.blockHash}\n                blockNumber={this.state.txReceipt.blockNumber}\n                gasUsed={this.state.txReceipt.gasUsed}/>\n                : null} \n\n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress,\n        tokenImperial: state.data.tokenImperial,\n        tokenDemocratic: state.data.tokenDemocratic,\n        multisigERC20: state.data.multisigERC20,\n        multisigERC20Address: state.data.multisigERC20Address,\n        updateERCBalances: state.data.updateBalancesERC,\n        tokenSymbol: state.data.chosenTokenSymbol\n    };\n}\n\nexport default connect(mapStateToProps)(ModalRecoverERCSafely);"]},"metadata":{},"sourceType":"module"}