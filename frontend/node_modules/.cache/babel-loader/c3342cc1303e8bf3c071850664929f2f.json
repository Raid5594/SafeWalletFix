{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalToken.js\";\nimport React from 'react';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport GetTokenForm from '../../presentationalComponents/GetTokenForm.js';\nimport '../../css/Modal.css';\nimport { connect } from 'react-redux';\n\nclass ModalToken extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      if (name === 'privateKey') {\n        if (event.target.validity.tooShort) {\n          event.target.setCustomValidity('Private key has to be 64 characters');\n        } else if (event.target.validity.patternMismatch) {\n          event.target.setCustomValidity('Only alphanumeric characters are allowed');\n        } else {\n          event.target.setCustomValidity('');\n        }\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.generateSecret();\n      this.toggle();\n      document.getElementById('TokenForm').reset();\n    };\n\n    this.toggle = () => {\n      if (this.state.isOpen) {\n        this.setState({\n          secret: ''\n        });\n      }\n\n      this.setState({\n        isOpen: !this.state.isOpen,\n        notVerified: true\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.toggle();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.toggle();\n    };\n\n    this.tokenInputHandler = event => {\n      this.setState({\n        token: event.target.value\n      });\n    };\n\n    this.generateSecret = () => {\n      this.props.web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        if (err) {\n          console.log(err);\n        } else {\n          const signatureObj = this.props.web3.eth.accounts.sign(\"Token \".concat(txCount), \"0x\".concat(this.state.privateKey));\n          const addrRecover = this.props.web3.eth.accounts.recover(\"Token \".concat(txCount), signatureObj.signature);\n          const xhttp = new XMLHttpRequest();\n          const data = {\n            address: this.props.address,\n            signature: signatureObj.signature\n          };\n          console.log(data);\n          console.log(addrRecover);\n\n          xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4) {\n              // request is done\n              if (xhttp.status === 200) {\n                // successfully\n                var obj = JSON.parse(xhttp.responseText);\n                console.log(obj.secret);\n\n                if (obj.secret == null) {//this.setState({ secret: 'Wrong private key' });\n                } else {\n                  this.setState({\n                    secret: obj.secret\n                  });\n                }\n              }\n            }\n          };\n\n          xhttp.open('POST', 'http://localhost:5597/totp-generate', true);\n          xhttp.setRequestHeader('Content-Type', 'application/json');\n          xhttp.send(JSON.stringify(data));\n        }\n      });\n    };\n\n    this.verifyToken = () => {\n      var xhttp = new XMLHttpRequest();\n      var data = {\n        token: this.state.token,\n        address: this.props.address\n      };\n\n      xhttp.onreadystatechange = () => {\n        if (xhttp.readyState === 4) {\n          // request is done\n          if (xhttp.status === 200) {\n            // successfully\n            var obj = JSON.parse(xhttp.responseText);\n            console.log(obj.verified);\n            this.setState({\n              goodToken: obj.verified\n            });\n          }\n        }\n      };\n\n      console.log(data);\n      xhttp.open('POST', 'http://localhost:5597/totp-verify', true);\n      xhttp.setRequestHeader('Content-Type', 'application/json');\n      xhttp.send(JSON.stringify(data));\n      this.setState({\n        notVerified: false\n      });\n    };\n\n    this.state = {\n      isOpen: false,\n      token: '',\n      secret: '',\n      privateKey: '',\n      notVerified: true,\n      goodToken: false\n    };\n  }\n\n  render() {\n    const verifyTokenBtn = React.createElement(\"form\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }), React.createElement(\"input\", {\n      type: \"text\",\n      name: \"token\",\n      onChange: this.tokenInputHandler,\n      className: \"modalInput\",\n      placeholder: \"Token\",\n      required: true,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.verifyToken,\n      className: \"modalButton\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, \"submit token\"));\n    const correctToken = React.createElement(\"p\", {\n      className: \"successToken\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"The token submitted is correct.\");\n    const incorrectToken = React.createElement(\"p\", {\n      className: \"failToken\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, \"The token submitted is incorrect.\");\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, React.createElement(GetTokenForm, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      toggle: this.toggle,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, React.createElement(\"p\", {\n      className: \"modalHeader\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }, \"Two-factor authentication\"), React.createElement(\"hr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }), React.createElement(\"img\", {\n      className: \"modalImg\",\n      src: this.state.secret,\n      alt: \"\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), this.state.notVerified ? verifyTokenBtn : this.state.goodToken ? correctToken : incorrectToken));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress\n  };\n}\n\nexport default connect(mapStateToProps)(ModalToken);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalToken.js"],"names":["React","ModalContent","GetTokenForm","connect","ModalToken","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","tooShort","setCustomValidity","patternMismatch","setState","handleSubmit","generateSecret","toggle","document","getElementById","reset","state","isOpen","secret","notVerified","onKeyDown","keyCode","onClickAway","modalNode","contains","tokenInputHandler","token","web3","eth","getTransactionCount","address","err","txCount","console","log","signatureObj","accounts","sign","privateKey","addrRecover","recover","signature","xhttp","XMLHttpRequest","data","onreadystatechange","readyState","status","obj","JSON","parse","responseText","open","setRequestHeader","send","stringify","verifyToken","verified","goodToken","render","verifyTokenBtn","correctToken","incorrectToken","n","mapStateToProps","etherAddress"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport GetTokenForm from '../../presentationalComponents/GetTokenForm.js';\nimport '../../css/Modal.css';\nimport { connect } from 'react-redux';\n\nclass ModalToken extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isOpen: false,\n            token: '',\n            secret: '',\n            privateKey: '',\n            notVerified: true,\n            goodToken: false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        if (name === 'privateKey') {\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            } \n        }\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.generateSecret();\n        this.toggle();\n        document.getElementById('TokenForm').reset();\n    }\n\n    toggle = () => {\n        if (this.state.isOpen) {\n            this.setState({ secret: '' });\n        }\n        this.setState({ \n        isOpen: !this.state.isOpen, \n        notVerified: true\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.toggle();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.toggle();\n    };\n\n    tokenInputHandler = (event) => {\n        this.setState({ token : event.target.value });\n    }\t\n\n    generateSecret = () => {\n        this.props.web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n            if (err) {\n                console.log(err);\n            } else {\n                const signatureObj = this.props.web3.eth.accounts.sign(`Token ${txCount}`, `0x${this.state.privateKey}`);\n                const addrRecover = this.props.web3.eth.accounts.recover(`Token ${txCount}`, signatureObj.signature);\n                const xhttp = new XMLHttpRequest();\n                const data = { address: this.props.address , signature : signatureObj.signature};\n                console.log(data);\n                console.log(addrRecover);\n                \n                xhttp.onreadystatechange = () => {\n                        if (xhttp.readyState === 4) { // request is done\n                            if (xhttp.status === 200) { // successfully\n                                var obj = JSON.parse(xhttp.responseText);\n                                console.log(obj.secret);\n                                if(obj.secret == null) {\n                                  //this.setState({ secret: 'Wrong private key' });\n                                } else {\n                                  this.setState({ secret: obj.secret });\n                                }\n                            }\n                        }\n                    };\n                xhttp.open('POST', 'http://localhost:5597/totp-generate', true);\n                xhttp.setRequestHeader('Content-Type', 'application/json');\n                xhttp.send(JSON.stringify(data));\n            }\n        });\n    }\n\n    verifyToken = () => {\n        var xhttp = new XMLHttpRequest();\n        var data = { \n            token: this.state.token, \n            address: this.props.address\n        };\n        xhttp.onreadystatechange = () => {\n            if (xhttp.readyState === 4) { // request is done\n                if (xhttp.status === 200) { // successfully\n                    var obj = JSON.parse(xhttp.responseText);\n                    console.log(obj.verified);\n                    this.setState({ goodToken: obj.verified });\n                }\n            }\n        };\n        console.log(data);\n        xhttp.open('POST', 'http://localhost:5597/totp-verify', true);\n        xhttp.setRequestHeader('Content-Type', 'application/json');\n        xhttp.send(JSON.stringify(data));\n        this.setState({ notVerified : false });\n    }\n\n    render() {\n\n        const verifyTokenBtn = \n            <form>\n                <hr/>\n                <input type=\"text\" name=\"token\" onChange={this.tokenInputHandler} className=\"modalInput\" placeholder=\"Token\" required/>\n                <button type=\"button\" onClick={this.verifyToken} className=\"modalButton\">submit token</button>\n            </form>;\n\n        const correctToken = <p className=\"successToken\">The token submitted is correct.</p>;\n        const incorrectToken = <p className=\"failToken\">The token submitted is incorrect.</p>;\n\n        return (\n            <div>\n                <GetTokenForm \n                    handleSubmit={this.handleSubmit}\n                    handleInputChange={this.handleInputChange}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                    toggle={this.toggle} \n                    onKeyDown={this.onKeyDown}\n                    onClickAway={this.onClickAway}\n                    modalRef={n => this.modalNode = n}> \n                    <p className=\"modalHeader\">Two-factor authentication</p>\n                    <hr/>\n                    <img className=\"modalImg\" src={this.state.secret} alt=\"\" />\n                    { this.state.notVerified ? verifyTokenBtn : \n                    this.state.goodToken ? correctToken : incorrectToken }\n                </ModalContent>\n                }\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress\n    };\n}\n\nexport default connect(mapStateToProps)(ModalToken);"]},"metadata":{},"sourceType":"module"}