{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalWithdrawLimit.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport WithdrawLimitForm from '../../presentationalComponents/WithdrawLimitForm.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { connect } from 'react-redux';\n\nclass ModalWithdrawLimit extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'safetyPrivateKey':\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.withdrawLimit(this.state.privateKey, this.state.safetyPrivateKey);\n      document.getElementById('WithdrawLimit').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.withdrawLimit = (privateKey, safetyPrivateKey) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      let multisigAddress = this.props.multisigAddress;\n      let modal = this;\n      let updateBalances = this.props.updateBalances;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        multisig.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // Build the transaction\n            web3.eth.getGasPrice().then(gasPrice => {\n              let msg = [{\n                type: 'address',\n                value: addrFrom\n              }, {\n                type: 'uint256',\n                value: nonce.toString()\n              }];\n              console.log(msg);\n\n              const _message = EthCrypto.hash.keccak256(msg);\n\n              console.log(\"message: \".concat(_message));\n\n              const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n              console.log(\"signature: \".concat(_signature));\n              multisig.methods.withdrawLimit(_signature).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                console.log('Current gas price: ', gasPrice);\n                console.log('Estimate of gas usage: ', gasAmount);\n                const txObject = {\n                  nonce: web3.utils.toHex(txCount),\n                  gasLimit: web3.utils.toHex(gasAmount),\n                  gasPrice: web3.utils.toHex(gasPrice),\n                  to: multisigAddress,\n                  data: multisig.methods.withdrawLimit(_signature).encodeABI()\n                };\n                console.log(txObject); // Sign the transaction\n\n                const tx = new Tx(txObject, {\n                  chain: 'ropsten',\n                  hardfork: 'petersburg'\n                });\n                tx.sign(priv);\n                const serializedTransaction = tx.serialize();\n                const rawTx = '0x' + serializedTransaction.toString('hex');\n                console.log(rawTx); // Broadcast the transaction\n\n                web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                  console.log('Hash of transaction: ', hash);\n                  modal.setState({\n                    txHash: hash,\n                    hashReceipt: true,\n                    confirmationReceipt: false\n                  });\n                  modal.openModal();\n                }).once('confirmation', function (confNumber, receipt) {\n                  console.log('Transaction confirmation number: ', confNumber);\n                  console.log('Transaction receipt: ', receipt);\n                  updateBalances(multisig);\n                  modal.setState({\n                    txReceipt: receipt,\n                    confirmationReceipt: true,\n                    hashReceipt: false\n                  });\n                  modal.openModal();\n                }).on('error', function (error) {\n                  console.log(error);\n                });\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      safetyPrivateKey: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(WithdrawLimitForm, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress,\n    multisig: state.data.multisig,\n    multisigAddress: state.data.multisigAddress,\n    updateBalances: state.data.updateBalancesEther\n  };\n}\n\nexport default connect(mapStateToProps)(ModalWithdrawLimit);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalWithdrawLimit.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","WithdrawLimitForm","Transaction","Tx","EthCrypto","connect","ModalWithdrawLimit","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","tooShort","setCustomValidity","patternMismatch","setState","handleSubmit","withdrawLimit","state","privateKey","safetyPrivateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","getGasPrice","then","gasPrice","msg","type","toString","_message","hash","keccak256","_signature","sign","estimateGas","gas","gasAmount","txObject","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","serializedTransaction","serialize","rawTx","sendSignedTransaction","once","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed","mapStateToProps","etherAddress","updateBalancesEther"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport WithdrawLimitForm from '../../presentationalComponents/WithdrawLimitForm.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport { connect } from 'react-redux';\n\nclass ModalWithdrawLimit extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            safetyPrivateKey: '',\n            privateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'safetyPrivateKey':\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;\n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.withdrawLimit(this.state.privateKey, this.state.safetyPrivateKey);\n        document.getElementById('WithdrawLimit').reset();    \n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false, \n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    withdrawLimit = (privateKey, safetyPrivateKey) => {\n        let web3 = this.props.web3;\n        let multisig = this.props.multisig;\n        let multisigAddress = this.props.multisigAddress;\n        let modal = this;\n        let updateBalances = this.props.updateBalances;\n        let addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n\n        web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n            multisig.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    // Build the transaction\n                    web3.eth.getGasPrice().then((gasPrice) => {\n                    \n                        let msg = [\n                          { type: 'address', value: addrFrom},\n                          { type: 'uint256', value: nonce.toString()}\n                        ];\n\n                        console.log(msg);\n                        const _message = EthCrypto.hash.keccak256(msg); \n                        console.log(`message: ${_message}`);\n                        \n                        const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n                        console.log(`signature: ${_signature}`);\n                        multisig.methods.withdrawLimit(_signature).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                            console.log('Current gas price: ', gasPrice);\n                            console.log('Estimate of gas usage: ', gasAmount);\n                            const txObject = {\n                                nonce: web3.utils.toHex(txCount),\n                                gasLimit: web3.utils.toHex(gasAmount), \n                                gasPrice: web3.utils.toHex(gasPrice), \n                                to: multisigAddress,\n                                data: multisig.methods.withdrawLimit(_signature).encodeABI()\n                            };\n                            console.log(txObject);\n\n                            // Sign the transaction\n                            const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                            tx.sign(priv);\n\n                            const serializedTransaction = tx.serialize();\n                            const rawTx = '0x' + serializedTransaction.toString('hex');\n                            \n                            console.log(rawTx);\n\n                            // Broadcast the transaction\n                            web3.eth.sendSignedTransaction(rawTx)\n                            .once('transactionHash', function(hash){ \n                                console.log('Hash of transaction: ', hash);\n                                modal.setState({ \n                                    txHash: hash,\n                                    hashReceipt: true,\n                                    confirmationReceipt: false                       \n                                });\n                                modal.openModal();\n                            })\n                            .once('confirmation', function(confNumber, receipt){ \n                                console.log('Transaction confirmation number: ', confNumber);\n                                console.log('Transaction receipt: ', receipt);\n                                updateBalances(multisig);\n                                \n                                modal.setState({ \n                                    txReceipt: receipt,\n                                    confirmationReceipt: true, \n                                    hashReceipt: false\n                                });\n                                modal.openModal(); \n                            })\n                            .on('error', function(error){ console.log(error); });\n                        });\n                    });\n                }\n            });\n        });\n    } \n\n    render() {\n\n    return (\n        <span>\n            <WithdrawLimitForm \n            handleSubmit={this.handleSubmit} \n            handleInputChange={this.handleInputChange}\n            errors={this.state.errors}/>\n            {\n            this.state.isOpen && \n            <ModalContent \n            closeModal={this.closeModal} \n            onKeyDown={this.onKeyDown}\n            onClickAway={this.onClickAway}\n            modalRef={n => this.modalNode = n}> \n            {this.state.hashReceipt ? \n            <InitialTxHashComponent transactionHash={this.state.txHash} />\n            : null} \n            {this.state.confirmationReceipt ?\n            <ReceiptComponent\n            transactionHash={this.state.txReceipt.transactionHash}\n            blockHash={this.state.txReceipt.blockHash}\n            blockNumber={this.state.txReceipt.blockNumber}\n            gasUsed={this.state.txReceipt.gasUsed}/>\n            : null} \n            </ModalContent>\n            }\n        </span>\n    );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress,\n        multisig: state.data.multisig,\n        multisigAddress: state.data.multisigAddress,\n        updateBalances: state.data.updateBalancesEther\n    };\n}\n\nexport default connect(mapStateToProps)(ModalWithdrawLimit);"]},"metadata":{},"sourceType":"module"}