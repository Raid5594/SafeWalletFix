{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalTransferERCToken.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport TransferWithTokenFormERC from '../../presentationalComponents/TransferWithTokenFormERC.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\n\nclass ModalTransferERCToken extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'tokenTFA':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Token has to be 6 digits');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.tokenTFA);\n      document.getElementById('TransferFormTokenERC').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.transfer = (amountToTransfer, recipientAddress, privateKey, tokenTFA) => {\n      let web3 = this.props.web3;\n      let multisigERC20Token = this.props.multisigERC20Token;\n      let multisigERC20Address = this.props.multisigERC20Address;\n      let modal = this;\n      let updateERCBalances = this.props.updateERCBalances;\n      let tokenSymbol = this.props.tokenSymbol;\n      let addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex'); // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisigERC20Token.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            var xhttp = new XMLHttpRequest();\n            var data = {\n              addressFrom: addrFrom,\n              addressTo: recipientAddress,\n              amount: amountToTransfer,\n              nonce: nonce,\n              symbol: tokenSymbol,\n              token: tokenTFA\n            };\n\n            xhttp.onreadystatechange = () => {\n              if (xhttp.readyState === 4) {\n                // request is done\n                if (xhttp.status === 200) {\n                  // successfully\n                  var obj = JSON.parse(xhttp.responseText);\n\n                  if (obj.verified) {\n                    console.log({\n                      addressFrom: addrFrom,\n                      addressTo: recipientAddress,\n                      amount: amountToTransfer,\n                      signature: obj.signature,\n                      symbol: tokenSymbol\n                    }); // Build the transaction\n\n                    web3.eth.getGasPrice().then(gasPrice => {\n                      console.log('Current gas price: ', gasPrice);\n                      multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).estimateGas({\n                        gas: gasPrice,\n                        from: addrFrom\n                      }, function (error, gasAmount) {\n                        if (error) {\n                          console.log(error);\n                        } else {\n                          console.log('Estimate of gas usage: ', gasAmount);\n                          const txObject = {\n                            nonce: web3.utils.toHex(txCount),\n                            gasLimit: web3.utils.toHex(gasAmount),\n                            gasPrice: web3.utils.toHex(gasPrice),\n                            to: multisigERC20Address,\n                            data: multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).encodeABI()\n                          };\n                          console.log(txObject); // Sign the transaction\n\n                          const tx = new Tx(txObject, {\n                            chain: 'ropsten',\n                            hardfork: 'petersburg'\n                          });\n                          tx.sign(priv);\n                          const serializedTransaction = tx.serialize();\n                          const rawTx = '0x' + serializedTransaction.toString('hex');\n                          console.log(rawTx); // Broadcast the transaction\n\n                          web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                            console.log('Hash of transaction: ', hash);\n                            modal.setState({\n                              txHash: hash,\n                              hashReceipt: true,\n                              confirmationReceipt: false\n                            });\n                            modal.openModal();\n                          }).once('confirmation', function (confNumber, receipt) {\n                            console.log('Transaction confirmation number: ', confNumber);\n                            console.log('Second receipt of transaction: ', receipt);\n                            updateERCBalances();\n                            modal.setState({\n                              txReceipt: receipt,\n                              confirmationReceipt: true,\n                              hashReceipt: false\n                            });\n                            modal.openModal();\n                          }).on('error', function (error) {\n                            console.log(error);\n                          });\n                        }\n                      });\n                    });\n                  } else {\n                    alert('Wrong Token Submitted');\n                  }\n                }\n              }\n            };\n\n            xhttp.open('POST', 'http://localhost:5597/submit-transaction-erc', true);\n            xhttp.setRequestHeader('Content-Type', 'application/json');\n            xhttp.send(JSON.stringify(data));\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      tokenTFA: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }, React.createElement(TransferWithTokenFormERC, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 229\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nexport default ModalTransferERCToken;","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalTransferERCToken.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","TransferWithTokenFormERC","Transaction","Tx","ModalTransferERCToken","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","transfer","state","amountToTransfer","recipientAddress","privateKey","tokenTFA","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","multisigERC20Token","multisigERC20Address","modal","updateERCBalances","tokenSymbol","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","xhttp","XMLHttpRequest","data","addressFrom","addressTo","amount","symbol","token","onreadystatechange","readyState","status","obj","JSON","parse","responseText","verified","signature","getGasPrice","then","gasPrice","verifyTransaction__ef","estimateGas","gas","gasAmount","txObject","utils","toHex","gasLimit","to","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","alert","open","setRequestHeader","send","stringify","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport TransferWithTokenFormERC from '../../presentationalComponents/TransferWithTokenFormERC.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\n\nclass ModalTransferERCToken extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            amountToTransfer: '',\n            recipientAddress: '',\n            privateKey: '',\n            tokenTFA: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'amountToTransfer': \n            if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        case 'tokenTFA':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Token has to be 6 digits');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;\n        case 'recipientAddress':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Public key has to be 42 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Public key has to start with \"0x\"');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;     \n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.tokenTFA);\n        document.getElementById('TransferFormTokenERC').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    transfer = (amountToTransfer, recipientAddress, privateKey, tokenTFA) => {\n\n        let web3 = this.props.web3;\n        let multisigERC20Token = this.props.multisigERC20Token;\n        let multisigERC20Address = this.props.multisigERC20Address;\n        let modal = this;\n        let updateERCBalances = this.props.updateERCBalances;\n        let tokenSymbol = this.props.tokenSymbol;\n        let addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n\n        // Getting Ethereum transaction count\n        web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n            // Retrieving the current nonce inside the contract\n            multisigERC20Token.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    \n                    var xhttp = new XMLHttpRequest();\n                    var data =\n                    { addressFrom: addrFrom,\n                      addressTo: recipientAddress, \n                      amount: amountToTransfer,\n                      nonce: nonce,\n                      symbol: tokenSymbol,\n                      token: tokenTFA\n                    };\n                    xhttp.onreadystatechange = () => {\n                        if (xhttp.readyState === 4) { // request is done\n                            if (xhttp.status === 200) { // successfully\n                                var obj = JSON.parse(xhttp.responseText);\n                                if (obj.verified) {\n                                    console.log({ \n                                    addressFrom: addrFrom,\n                                    addressTo: recipientAddress, \n                                    amount: amountToTransfer, \n                                    signature: obj.signature,\n                                    symbol: tokenSymbol\n                                    });\n                                    // Build the transaction\n                                    web3.eth.getGasPrice().then((gasPrice) => {\n                                        console.log('Current gas price: ', gasPrice);    \n                                        multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                                            if (error) {\n                                                console.log(error);\n                                                \n                                            } else {\n                                            console.log('Estimate of gas usage: ', gasAmount);\n                                            \n                                            const txObject = {\n                                                nonce: web3.utils.toHex(txCount),\n                                                gasLimit: web3.utils.toHex(gasAmount), \n                                                gasPrice: web3.utils.toHex(gasPrice),\n                                                to: multisigERC20Address,\n                                                data: multisigERC20Token.methods.verifyTransaction__ef(recipientAddress, amountToTransfer, obj.signature, tokenSymbol).encodeABI()\n                                            };\n                                            console.log(txObject);\n\n                                            // Sign the transaction\n                                            const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                                            tx.sign(priv);\n\n                                            const serializedTransaction = tx.serialize();\n                                            const rawTx = '0x' + serializedTransaction.toString('hex');\n                                            \n                                            console.log(rawTx);\n                                            \n                                            \n                                            // Broadcast the transaction\n                                            web3.eth.sendSignedTransaction(rawTx)\n                                            .once('transactionHash', function(hash){ \n                                                console.log('Hash of transaction: ', hash);\n                                                modal.setState({ \n                                                  txHash: hash,\n                                                  hashReceipt: true,\n                                                  confirmationReceipt: false                       \n                                                });\n                                                modal.openModal();\n                                            })\n                                            .once('confirmation', function(confNumber, receipt){ \n                                                console.log('Transaction confirmation number: ', confNumber);\n                                                console.log('Second receipt of transaction: ', receipt);\n                                                updateERCBalances();\n                                        \n                                                modal.setState({ \n                                                  txReceipt: receipt,\n                                                  confirmationReceipt: true, \n                                                  hashReceipt: false\n                                                });\n                                                modal.openModal(); \n                                            })\n                                            .on('error', function(error){ console.log(error); });\n                                            \n                                            }\n                                        });\n                                      });\n\n                                } else {\n                                    alert('Wrong Token Submitted');\n                                }   \n                            }\n                        }\n                        };\n                    xhttp.open('POST', 'http://localhost:5597/submit-transaction-erc', true);\n                    xhttp.setRequestHeader('Content-Type', 'application/json');\n                    xhttp.send(JSON.stringify(data));                       \n                    }\n                });\n            }\n        );\n    }\n  \n\n    render() {\n\n        return (\n            <span>\n                <TransferWithTokenFormERC \n                handleSubmit={this.handleSubmit} \n                handleInputChange={this.handleInputChange}\n                errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                closeModal={this.closeModal} \n                onKeyDown={this.onKeyDown}\n                onClickAway={this.onClickAway}\n                modalRef={n => this.modalNode = n}> \n                {this.state.hashReceipt ? \n                <InitialTxHashComponent transactionHash={this.state.txHash} />\n                : null} \n                {this.state.confirmationReceipt ?\n                <ReceiptComponent\n                transactionHash={this.state.txReceipt.transactionHash}\n                blockHash={this.state.txReceipt.blockHash}\n                blockNumber={this.state.txReceipt.blockNumber}\n                gasUsed={this.state.txReceipt.gasUsed}/>\n                : null} \n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nexport default ModalTransferERCToken;"]},"metadata":{},"sourceType":"module"}