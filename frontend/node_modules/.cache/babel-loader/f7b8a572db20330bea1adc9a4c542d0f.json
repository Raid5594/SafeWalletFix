{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalDepositSafely.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeDepositForm from '../../presentationalComponents/SafeDepositForm.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalDepositSafety extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToDeposit':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'safetyPubKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.deposit(this.state.amountToDeposit, this.state.safetyPubKey, this.state.privateKey);\n      document.getElementById('DepositFormSafely').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.deposit = (amountToDeposit, safetyPubKey, privateKey) => {\n      let web3 = this.props.web3;\n      let multisig = this.props.multisig;\n      let multisigAddress = this.props.multisigAddress;\n      let modal = this;\n      let updateBalances = this.props.updateBalances;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n        web3.eth.getGasPrice().then(gasPrice => {\n          multisig.methods.deposit(safetyPubKey).estimateGas({\n            gas: gasPrice,\n            from: this.props.address,\n            value: amountToDeposit\n          }, function (error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(gasAmount),\n              gasPrice: web3.utils.toHex(gasPrice),\n              to: multisigAddress,\n              value: web3.utils.toHex(amountToDeposit),\n              data: multisig.methods.deposit(safetyPubKey).encodeABI()\n            };\n            console.log(txObject); // Sign the transaction\n\n            const tx = new Tx(txObject, {\n              chain: 'ropsten',\n              hardfork: 'petersburg'\n            });\n            tx.sign(priv);\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            console.log(rawTx); // Broadcast the transaction\n\n            web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n              console.log('Hash of transaction: ', hash);\n              modal.setState({\n                txHash: hash,\n                hashReceipt: true,\n                confirmationReceipt: false\n              });\n              modal.openModal();\n            }).once('confirmation', function (confNumber, receipt) {\n              console.log('Transaction confirmation number: ', confNumber);\n              console.log('Transaction receipt: ', receipt);\n              updateBalances(multisig);\n              modal.setState({\n                txReceipt: receipt,\n                confirmationReceipt: true,\n                hashReceipt: false\n              });\n              modal.openModal();\n            }).on('error', function (error) {\n              console.log(error);\n            });\n          });\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToDeposit: '',\n      safetyPubKey: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 153\n      },\n      __self: this\n    }, React.createElement(SafeDepositForm, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress,\n    multisig: state.data.multisig,\n    multisigAddress: state.data.multisigAddress,\n    updateBalances: state.data.updateBalancesEther\n  };\n}\n\nexport default connect(mapStateToProps)(ModalDepositSafety);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalDepositSafely.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","SafeDepositForm","Transaction","Tx","connect","ModalDepositSafety","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","deposit","state","amountToDeposit","safetyPubKey","privateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","priv","Buffer","from","eth","getTransactionCount","address","err","txCount","getGasPrice","then","gasPrice","methods","estimateGas","gas","error","gasAmount","console","log","txObject","nonce","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed","mapStateToProps","etherAddress","updateBalancesEther"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,sBAAP,MAAmC,0DAAnC;AACA,OAAOC,gBAAP,MAA6B,oDAA7B;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,OAAOC,eAAP,MAA4B,mDAA5B;AACA,OAAO,qBAAP;AACA,SAAQC,WAAW,IAAIC,EAAvB,QAAgC,eAAhC;AACA,SAASC,OAAT,QAAwB,aAAxB;;AAEA,MAAMC,kBAAN,SAAiCR,KAAK,CAACS,SAAvC,CAAiD;AAE7CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAcnBC,iBAdmB,GAcEC,KAAD,IAAW;AAC/BA,MAAAA,KAAK,CAACC,cAAN;AAD+B,4BAEPD,KAAK,CAACE,MAFC;AAAA,YAEvBC,IAFuB,iBAEvBA,IAFuB;AAAA,YAEjBC,KAFiB,iBAEjBA,KAFiB;;AAI/B,cAAQD,IAAR;AACA,aAAK,iBAAL;AACI,cAAIH,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AACxCN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,uBAA/B;AACF,WAFD,MAEO;AACJP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACF;;AACD;;AACJ,aAAK,YAAL;AACI,cAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,QAA1B,EAAoC;AACjCR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,qCAA/B;AACF,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AAC/CN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,0CAA/B;AACF,WAFM,MAEA;AACJP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACF;;AACD;;AACJ,aAAK,cAAL;AACI,cAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,QAA1B,EAAoC;AACjCR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,oCAA/B;AACF,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,eAA1B,EAA2C;AAC/CN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,mCAA/B;AACF,WAFM,MAEA;AACJP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACF;;AACD;;AACJ;AACI;AA3BJ;;AA8BA,WAAKE,QAAL,CAAc;AAAE,SAACN,IAAD,GAAQC;AAAV,OAAd;AACC,KAjDkB;;AAAA,SAmDnBM,YAnDmB,GAmDHV,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKU,OAAL,CAAa,KAAKC,KAAL,CAAWC,eAAxB,EAAyC,KAAKD,KAAL,CAAWE,YAApD,EAAkE,KAAKF,KAAL,CAAWG,UAA7E;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,mBAAxB,EAA6CC,KAA7C;AACH,KAvDkB;;AAAA,SAyDnBC,SAzDmB,GAyDP,MAAM;AACd,WAAKV,QAAL,CAAc;AACVW,QAAAA,MAAM,EAAE;AADE,OAAd;AAGH,KA7DkB;;AAAA,SA+DnBC,UA/DmB,GA+DN,MAAM;AACf,WAAKZ,QAAL,CAAc;AACVW,QAAAA,MAAM,EAAE;AADE,OAAd;AAGH,KAnEkB;;AAAA,SAqEnBE,SArEmB,GAqENtB,KAAD,IAAW;AACnB,aAAOA,KAAK,CAACuB,OAAN,KAAkB,EAAlB,IAAwB,KAAKF,UAAL,EAA/B;AACH,KAvEkB;;AAAA,SAyEnBG,WAzEmB,GAyEJxB,KAAD,IAAW;AACrB,UAAI,KAAKyB,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwB1B,KAAK,CAACE,MAA9B,CAAtB,EAA6D;AAC7D,WAAKmB,UAAL;AACH,KA5EkB;;AAAA,SA8EnBV,OA9EmB,GA8ET,CAACE,eAAD,EAAkBC,YAAlB,EAAgCC,UAAhC,KAA+C;AACrD,UAAIY,IAAI,GAAG,KAAK7B,KAAL,CAAW6B,IAAtB;AACA,UAAIC,QAAQ,GAAG,KAAK9B,KAAL,CAAW8B,QAA1B;AACA,UAAIC,eAAe,GAAG,KAAK/B,KAAL,CAAW+B,eAAjC;AACA,UAAIC,KAAK,GAAG,IAAZ;AACA,UAAIC,cAAc,GAAG,KAAKjC,KAAL,CAAWiC,cAAhC;AACA,YAAMC,IAAI,GAAGC,MAAM,CAACC,IAAP,CAAYnB,UAAZ,EAAwB,KAAxB,CAAb;AACAY,MAAAA,IAAI,CAACQ,GAAL,CAASC,mBAAT,CAA6B,KAAKtC,KAAL,CAAWuC,OAAxC,EAAiD,CAACC,GAAD,EAAMC,OAAN,KAAkB;AAC/DZ,QAAAA,IAAI,CAACQ,GAAL,CAASK,WAAT,GAAuBC,IAAvB,CAA6BC,QAAD,IAAc;AACtCd,UAAAA,QAAQ,CAACe,OAAT,CAAiBhC,OAAjB,CAAyBG,YAAzB,EAAuC8B,WAAvC,CAAmD;AAACC,YAAAA,GAAG,EAAEH,QAAN;AAAgBR,YAAAA,IAAI,EAAE,KAAKpC,KAAL,CAAWuC,OAAjC;AAA0CjC,YAAAA,KAAK,EAAES;AAAjD,WAAnD,EAAsH,UAASiC,KAAT,EAAgBC,SAAhB,EAA2B;AAC7IC,YAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCP,QAAnC;AACAM,YAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ,EAAuCF,SAAvC;AACA,kBAAMG,QAAQ,GAAG;AACbC,cAAAA,KAAK,EAAExB,IAAI,CAACyB,KAAL,CAAWC,KAAX,CAAiBd,OAAjB,CADM;AAEbe,cAAAA,QAAQ,EAAE3B,IAAI,CAACyB,KAAL,CAAWC,KAAX,CAAiBN,SAAjB,CAFG;AAGbL,cAAAA,QAAQ,EAAEf,IAAI,CAACyB,KAAL,CAAWC,KAAX,CAAiBX,QAAjB,CAHG;AAIba,cAAAA,EAAE,EAAE1B,eAJS;AAKbzB,cAAAA,KAAK,EAAEuB,IAAI,CAACyB,KAAL,CAAWC,KAAX,CAAiBxC,eAAjB,CALM;AAMb2C,cAAAA,IAAI,EAAE5B,QAAQ,CAACe,OAAT,CAAiBhC,OAAjB,CAAyBG,YAAzB,EAAuC2C,SAAvC;AANO,aAAjB;AAQAT,YAAAA,OAAO,CAACC,GAAR,CAAYC,QAAZ,EAX6I,CAa7I;;AACA,kBAAMQ,EAAE,GAAG,IAAIjE,EAAJ,CAAOyD,QAAP,EAAiB;AAAES,cAAAA,KAAK,EAAE,SAAT;AAAoBC,cAAAA,QAAQ,EAAE;AAA9B,aAAjB,CAAX;AACAF,YAAAA,EAAE,CAACG,IAAH,CAAQ7B,IAAR;AAEA,kBAAM8B,qBAAqB,GAAGJ,EAAE,CAACK,SAAH,EAA9B;AACA,kBAAMC,KAAK,GAAG,OAAOF,qBAAqB,CAACG,QAAtB,CAA+B,KAA/B,CAArB;AAEAjB,YAAAA,OAAO,CAACC,GAAR,CAAYe,KAAZ,EApB6I,CAsB7I;;AACArC,YAAAA,IAAI,CAACQ,GAAL,CAAS+B,qBAAT,CAA+BF,KAA/B,EACCG,IADD,CACM,iBADN,EACyB,UAASC,IAAT,EAAc;AACnCpB,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCmB,IAArC;AACAtC,cAAAA,KAAK,CAACrB,QAAN,CAAe;AACb4D,gBAAAA,MAAM,EAAED,IADK;AAEbE,gBAAAA,WAAW,EAAE,IAFA;AAGbC,gBAAAA,mBAAmB,EAAE;AAHR,eAAf;AAKAzC,cAAAA,KAAK,CAACX,SAAN;AACH,aATD,EAUCgD,IAVD,CAUM,cAVN,EAUsB,UAASK,UAAT,EAAqBC,OAArB,EAA6B;AAC/CzB,cAAAA,OAAO,CAACC,GAAR,CAAY,mCAAZ,EAAiDuB,UAAjD;AACAxB,cAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCwB,OAArC;AACA1C,cAAAA,cAAc,CAACH,QAAD,CAAd;AAEAE,cAAAA,KAAK,CAACrB,QAAN,CAAe;AACbiE,gBAAAA,SAAS,EAAED,OADE;AAEbF,gBAAAA,mBAAmB,EAAE,IAFR;AAGbD,gBAAAA,WAAW,EAAE;AAHA,eAAf;AAKAxC,cAAAA,KAAK,CAACX,SAAN;AACH,aArBD,EAsBCwD,EAtBD,CAsBI,OAtBJ,EAsBa,UAAS7B,KAAT,EAAe;AAAEE,cAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AAAqB,aAtBnD;AAuBH,WA9CD;AA+CH,SAhDD;AAiDH,OAlDD;AAmDH,KAxIkB;;AAEf,SAAKlC,KAAL,GAAa;AACTyD,MAAAA,MAAM,EAAE,EADC;AAETK,MAAAA,SAAS,EAAE,EAFF;AAGT7D,MAAAA,eAAe,EAAE,EAHR;AAITC,MAAAA,YAAY,EAAE,EAJL;AAKTC,MAAAA,UAAU,EAAE,EALH;AAMTK,MAAAA,MAAM,EAAE,KANC;AAOTkD,MAAAA,WAAW,EAAE,KAPJ;AAQTC,MAAAA,mBAAmB,EAAC;AARX,KAAb;AAUH;;AA8HDK,EAAAA,MAAM,GAAG;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,eAAD;AACI,MAAA,YAAY,EAAE,KAAKlE,YADvB;AAEI,MAAA,iBAAiB,EAAE,KAAKX,iBAF5B;AAGI,MAAA,MAAM,EAAE,KAAKa,KAAL,CAAWiE,MAHvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMI,KAAKjE,KAAL,CAAWQ,MAAX,IACA,oBAAC,YAAD;AACI,MAAA,UAAU,EAAE,KAAKC,UADrB;AAEI,MAAA,SAAS,EAAE,KAAKC,SAFpB;AAGI,MAAA,WAAW,EAAE,KAAKE,WAHtB;AAII,MAAA,QAAQ,EAAEsD,CAAC,IAAI,KAAKrD,SAAL,GAAiBqD,CAJpC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKC,KAAKlE,KAAL,CAAW0D,WAAX,GACG,oBAAC,sBAAD;AAAwB,MAAA,eAAe,EAAE,KAAK1D,KAAL,CAAWyD,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAEK,IAPN,EAQC,KAAKzD,KAAL,CAAW2D,mBAAX,GACG,oBAAC,gBAAD;AACE,MAAA,eAAe,EAAE,KAAK3D,KAAL,CAAW8D,SAAX,CAAqBK,eADxC;AAEE,MAAA,SAAS,EAAE,KAAKnE,KAAL,CAAW8D,SAAX,CAAqBM,SAFlC;AAGE,MAAA,WAAW,EAAE,KAAKpE,KAAL,CAAW8D,SAAX,CAAqBO,WAHpC;AAIE,MAAA,OAAO,EAAE,KAAKrE,KAAL,CAAW8D,SAAX,CAAqBQ,OAJhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADH,GAMK,IAdN,CAPJ,CADJ;AA2BH;;AAzK4C;;AA4KjD,SAASC,eAAT,CAAyBvE,KAAzB,EAAgC;AAC5B,SAAO;AACHe,IAAAA,IAAI,EAAEf,KAAK,CAAC4C,IAAN,CAAW7B,IADd;AAEHU,IAAAA,OAAO,EAAEzB,KAAK,CAAC4C,IAAN,CAAW4B,YAFjB;AAGHxD,IAAAA,QAAQ,EAAEhB,KAAK,CAAC4C,IAAN,CAAW5B,QAHlB;AAIHC,IAAAA,eAAe,EAAEjB,KAAK,CAAC4C,IAAN,CAAW3B,eAJzB;AAKHE,IAAAA,cAAc,EAAEnB,KAAK,CAAC4C,IAAN,CAAW6B;AALxB,GAAP;AAOH;;AAED,eAAe3F,OAAO,CAACyF,eAAD,CAAP,CAAyBxF,kBAAzB,CAAf","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeDepositForm from '../../presentationalComponents/SafeDepositForm.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalDepositSafety extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            amountToDeposit: '',\n            safetyPubKey: '',\n            privateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n    event.preventDefault();\n    const { name, value } = event.target;\n\n    switch (name) {\n    case 'amountToDeposit': \n        if (event.target.validity.patternMismatch) {\n           event.target.setCustomValidity('Please input a number');\n        } else {\n           event.target.setCustomValidity('');\n        }  \n        break;\n    case 'privateKey':\n        if (event.target.validity.tooShort) {\n           event.target.setCustomValidity('Private key has to be 64 characters');\n        } else if (event.target.validity.patternMismatch) {\n           event.target.setCustomValidity('Only alphanumeric characters are allowed');\n        } else {\n           event.target.setCustomValidity('');\n        }\n        break;\n    case 'safetyPubKey':\n        if (event.target.validity.tooShort) {\n           event.target.setCustomValidity('Public key has to be 42 characters');\n        } else if (event.target.validity.patternMismatch) {\n           event.target.setCustomValidity('Public key has to start with \"0x\"');\n        } else {\n           event.target.setCustomValidity('');\n        }\n        break;     \n    default:\n        break;\n    }\n\n    this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.deposit(this.state.amountToDeposit, this.state.safetyPubKey ,this.state.privateKey);\n        document.getElementById('DepositFormSafely').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true, \n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false, \n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    deposit = (amountToDeposit, safetyPubKey, privateKey) => {\n        let web3 = this.props.web3;\n        let multisig = this.props.multisig;\n        let multisigAddress = this.props.multisigAddress;\n        let modal = this;\n        let updateBalances = this.props.updateBalances;\n        const priv = Buffer.from(privateKey, 'hex');\n        web3.eth.getTransactionCount(this.props.address, (err, txCount) => {\n            web3.eth.getGasPrice().then((gasPrice) => {\n                multisig.methods.deposit(safetyPubKey).estimateGas({gas: gasPrice, from: this.props.address, value: amountToDeposit}, function(error, gasAmount) {\n                    console.log('Current gas price: ', gasPrice);\n                    console.log('Estimate of gas usage: ', gasAmount);\n                    const txObject = {\n                        nonce: web3.utils.toHex(txCount),\n                        gasLimit: web3.utils.toHex(gasAmount), \n                        gasPrice: web3.utils.toHex(gasPrice), \n                        to: multisigAddress,\n                        value: web3.utils.toHex(amountToDeposit),\n                        data: multisig.methods.deposit(safetyPubKey).encodeABI()\n                    };\n                    console.log(txObject);\n\n                    // Sign the transaction\n                    const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                    tx.sign(priv);\n\n                    const serializedTransaction = tx.serialize();\n                    const rawTx = '0x' + serializedTransaction.toString('hex');\n                    \n                    console.log(rawTx);\n\n                    // Broadcast the transaction\n                    web3.eth.sendSignedTransaction(rawTx)\n                    .once('transactionHash', function(hash){ \n                        console.log('Hash of transaction: ', hash);\n                        modal.setState({ \n                          txHash: hash,\n                          hashReceipt: true,\n                          confirmationReceipt: false                       \n                        });\n                        modal.openModal();\n                    })\n                    .once('confirmation', function(confNumber, receipt){ \n                        console.log('Transaction confirmation number: ', confNumber); \n                        console.log('Transaction receipt: ', receipt);\n                        updateBalances(multisig);\n                        \n                        modal.setState({ \n                          txReceipt: receipt,\n                          confirmationReceipt: true, \n                          hashReceipt: false\n                        });\n                        modal.openModal(); \n                    })\n                    .on('error', function(error){ console.log(error); });\n                });\n            });\n        });\n    } \n\n    render() {\n\n        return (\n            <span>\n                <SafeDepositForm \n                    handleSubmit={this.handleSubmit} \n                    handleInputChange={this.handleInputChange}\n                    errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                    closeModal={this.closeModal} \n                    onKeyDown={this.onKeyDown}\n                    onClickAway={this.onClickAway}\n                    modalRef={n => this.modalNode = n}> \n                {this.state.hashReceipt ? \n                    <InitialTxHashComponent transactionHash={this.state.txHash} />\n                    : null} \n                {this.state.confirmationReceipt ?\n                    <ReceiptComponent\n                      transactionHash={this.state.txReceipt.transactionHash}\n                      blockHash={this.state.txReceipt.blockHash}\n                      blockNumber={this.state.txReceipt.blockNumber}\n                      gasUsed={this.state.txReceipt.gasUsed}/>\n                    : null} \n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress,\n        multisig: state.data.multisig,\n        multisigAddress: state.data.multisigAddress,\n        updateBalances: state.data.updateBalancesEther\n    };\n}\n\nexport default connect(mapStateToProps)(ModalDepositSafety);"]},"metadata":{},"sourceType":"module"}