{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalTransferERCSafely.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport TransferWithKeyFormERC from '../../presentationalComponents/TransferWithKeyFormERC.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport BigNumber from 'bignumber.js';\nimport { connect } from 'react-redux';\n\nclass ModalTransferERCSafely extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'safetyPrivateKey':\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.safetyPrivateKey);\n      document.getElementById('TransferFormERC').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.transfer = (amountToTransfer, recipientAddress, privateKey, safetyPrivateKey) => {\n      const web3 = this.props.web3;\n      const tokenImperial = this.props.tokenImperial;\n      const tokenDemocratic = this.props.tokenDemocratic;\n      const multisigERC20 = this.props.multisigERC20;\n      const multisigERC20Address = this.props.multisigERC20Address;\n      const modal = this;\n      const updateERCBalances = this.props.updateERCBalances;\n      const tokenSymbol = this.props.tokenSymbol;\n      const addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      BigNumber.set({\n        DECIMAL_PLACES: 18\n      }); // We need it to convert large wei inputs\n      // Getting Ethereum transaction count\n\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        // Retrieving the current nonce inside the contract\n        multisigERC20.methods.transactionNonces(addrFrom).call({\n          from: addrFrom\n        }, (error, nonce) => {\n          if (error) {\n            console.log(error);\n          } else {\n            // The next few lines go around issues with big numbers\n            let x = new BigNumber(amountToTransfer);\n            let val = web3.utils.fromWei(x.toString(10), 'ether');\n            let value = web3.utils.toWei(val.toString(), 'ether');\n            let msg = [{\n              type: \"address\",\n              value: addrFrom\n            }, {\n              type: \"address\",\n              value: recipientAddress\n            }, {\n              type: \"uint256\",\n              value: value\n            }, {\n              type: \"uint256\",\n              value: nonce.toString()\n            }, {\n              type: \"bytes32\",\n              value: tokenSymbol\n            }];\n            console.log(msg);\n\n            const _message = EthCrypto.hash.keccak256(msg);\n\n            console.log(\"message: \".concat(_message));\n\n            const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n            console.log(\"signature: \".concat(_signature)); // Build the transaction\n\n            web3.eth.getGasPrice().then(gasPrice => {\n              console.log('Current gas price: ', gasPrice);\n              multisigERC20.methods.verifyTransaction__ef(recipientAddress, value, _signature, tokenSymbol).estimateGas({\n                gas: gasPrice,\n                from: addrFrom\n              }, function (error, gasAmount) {\n                if (error) {\n                  console.log(error);\n                } else {\n                  console.log('Estimate of gas usage: ', gasAmount);\n                  const txObject = {\n                    nonce: web3.utils.toHex(txCount),\n                    gasLimit: web3.utils.toHex(gasAmount),\n                    gasPrice: web3.utils.toHex(gasPrice),\n                    to: multisigERC20Address,\n                    data: multisigERC20.methods.verifyTransaction__ef(recipientAddress, value, _signature, tokenSymbol).encodeABI()\n                  };\n                  console.log(txObject); // Sign the transaction\n\n                  const tx = new Tx(txObject, {\n                    chain: 'ropsten',\n                    hardfork: 'petersburg'\n                  });\n                  tx.sign(priv);\n                  const serializedTransaction = tx.serialize();\n                  const rawTx = '0x' + serializedTransaction.toString('hex');\n                  console.log(rawTx); // Broadcast the transaction\n\n                  web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n                    console.log('Hash of transaction: ', hash);\n                    modal.setState({\n                      txHash: hash,\n                      hashReceipt: true,\n                      confirmationReceipt: false\n                    });\n                    modal.openModal();\n                  }).once('confirmation', function (confNumber, receipt) {\n                    console.log('Transaction confirmation number: ', confNumber);\n                    console.log('Second receipt of transaction: ', receipt);\n                    updateERCBalances(tokenImperial, tokenDemocratic, multisigERC20);\n                    modal.setState({\n                      txReceipt: receipt,\n                      confirmationReceipt: true,\n                      hashReceipt: false\n                    });\n                    modal.openModal();\n                  }).on('error', function (error) {\n                    console.log(error);\n                  });\n                }\n              });\n            });\n          }\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      recipientAddress: '',\n      privateKey: '',\n      safetyPrivateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, React.createElement(TransferWithKeyFormERC, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress,\n    tokenImperial: state.data.tokenImperial,\n    tokenDemocratic: state.data.tokenDemocratic,\n    multisigERC20: state.data.multisigERC20,\n    multisigERC20Address: state.data.multisigERC20Address,\n    updateERCBalances: state.data.updateBalancesERC,\n    tokenSymbol: state.data.chosenTokenSymbol\n  };\n}\n\nexport default connect(mapStateToProps)(ModalTransferERCSafely);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalTransferERCSafely.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","TransferWithKeyFormERC","Transaction","Tx","EthCrypto","BigNumber","connect","ModalTransferERCSafely","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","transfer","state","amountToTransfer","recipientAddress","privateKey","safetyPrivateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","tokenImperial","tokenDemocratic","multisigERC20","multisigERC20Address","modal","updateERCBalances","tokenSymbol","addrFrom","address","priv","Buffer","from","set","DECIMAL_PLACES","eth","getTransactionCount","err","txCount","methods","transactionNonces","call","error","nonce","console","log","x","val","utils","fromWei","toString","toWei","msg","type","_message","hash","keccak256","_signature","sign","getGasPrice","then","gasPrice","verifyTransaction__ef","estimateGas","gas","gasAmount","txObject","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","serializedTransaction","serialize","rawTx","sendSignedTransaction","once","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed","mapStateToProps","etherAddress","updateBalancesERC","chosenTokenSymbol"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport TransferWithKeyFormERC from '../../presentationalComponents/TransferWithKeyFormERC.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport EthCrypto from 'eth-crypto';\nimport BigNumber from 'bignumber.js';        \nimport { connect } from 'react-redux';\n\nclass ModalTransferERCSafely extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            amountToTransfer: '',\n            recipientAddress: '',\n            privateKey: '',\n            safetyPrivateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'amountToTransfer': \n            if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        case 'safetyPrivateKey':\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;\n        case 'recipientAddress':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Public key has to be 42 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Public key has to start with \"0x\"');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.transfer(this.state.amountToTransfer, this.state.recipientAddress, this.state.privateKey, this.state.safetyPrivateKey); \n        document.getElementById('TransferFormERC').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    transfer = (amountToTransfer, recipientAddress, privateKey, safetyPrivateKey) => {\n      \n        const web3 = this.props.web3;\n        const tokenImperial = this.props.tokenImperial;\n        const tokenDemocratic = this.props.tokenDemocratic;\n        const multisigERC20 = this.props.multisigERC20;\n        const multisigERC20Address = this.props.multisigERC20Address;\n        const modal = this;\n        const updateERCBalances = this.props.updateERCBalances;\n        const tokenSymbol = this.props.tokenSymbol;\n        const addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n        BigNumber.set({ DECIMAL_PLACES: 18 }); // We need it to convert large wei inputs\n\n        // Getting Ethereum transaction count\n        web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n            // Retrieving the current nonce inside the contract\n            multisigERC20.methods.transactionNonces(addrFrom).call({from: addrFrom}, (error, nonce) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    \n                    // The next few lines go around issues with big numbers\n                    let x = new BigNumber(amountToTransfer);\n                    let val = web3.utils.fromWei(x.toString(10), 'ether');\n                    let value = web3.utils.toWei(val.toString(), 'ether');\n                    \n                    let msg = [\n                      { type: \"address\", value: addrFrom},\n                      { type: \"address\", value: recipientAddress},\n                      { type: \"uint256\", value: value},\n                      { type: \"uint256\", value: nonce.toString()},\n                      { type: \"bytes32\", value: tokenSymbol}\n                    ];\n\n                    console.log(msg);\n                    const _message = EthCrypto.hash.keccak256(msg); \n                    console.log(`message: ${_message}`);\n                    \n                    const _signature = EthCrypto.sign(safetyPrivateKey, _message);\n\n                    console.log(`signature: ${_signature}`);\n                    // Build the transaction\n                    web3.eth.getGasPrice().then((gasPrice) => {\n                        console.log('Current gas price: ', gasPrice);    \n                        multisigERC20.methods.verifyTransaction__ef(recipientAddress, value, _signature, tokenSymbol).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                            if (error) {\n                                console.log(error);\n                                \n                            } else {\n                                console.log('Estimate of gas usage: ', gasAmount);\n                                \n                                const txObject = {\n                                    nonce: web3.utils.toHex(txCount),\n                                    gasLimit: web3.utils.toHex(gasAmount), \n                                    gasPrice: web3.utils.toHex(gasPrice),\n                                    to: multisigERC20Address,\n                                    data: multisigERC20.methods.verifyTransaction__ef(recipientAddress, value, _signature, tokenSymbol).encodeABI()\n                                };\n                                console.log(txObject);\n\n                                // Sign the transaction\n                                const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                                tx.sign(priv);\n\n                                const serializedTransaction = tx.serialize();\n                                const rawTx = '0x' + serializedTransaction.toString('hex');\n                                \n                                console.log(rawTx);\n                                \n                                // Broadcast the transaction\n                                web3.eth.sendSignedTransaction(rawTx)\n                                .once('transactionHash', function(hash){ \n                                    console.log('Hash of transaction: ', hash);\n                                    modal.setState({ \n                                        txHash: hash,\n                                        hashReceipt: true,\n                                        confirmationReceipt: false                       \n                                    });\n                                    modal.openModal();\n                                })\n                                .once('confirmation', function(confNumber, receipt){ \n                                    console.log('Transaction confirmation number: ', confNumber);\n                                    console.log('Second receipt of transaction: ', receipt);\n\n                                    updateERCBalances(tokenImperial, tokenDemocratic, multisigERC20);\n                            \n                                    modal.setState({ \n                                        txReceipt: receipt,\n                                        confirmationReceipt: true, \n                                        hashReceipt: false\n                                    });\n                                    modal.openModal(); \n                                })\n                                .on('error', function(error){ console.log(error); });\n                            }\n                        });\n                    });\n                }\n            });\n        });\n    } \n\n    render() {\n\n        return (\n            <span>\n                <TransferWithKeyFormERC \n                handleSubmit={this.handleSubmit} \n                handleInputChange={this.handleInputChange}\n                errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                closeModal={this.closeModal} \n                onKeyDown={this.onKeyDown}\n                onClickAway={this.onClickAway}\n                modalRef={n => this.modalNode = n}> \n                {this.state.hashReceipt ? \n                <InitialTxHashComponent transactionHash={this.state.txHash} />\n                : null} \n                {this.state.confirmationReceipt ?\n                <ReceiptComponent\n                transactionHash={this.state.txReceipt.transactionHash}\n                blockHash={this.state.txReceipt.blockHash}\n                blockNumber={this.state.txReceipt.blockNumber}\n                gasUsed={this.state.txReceipt.gasUsed}/>\n                : null} \n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress,\n        tokenImperial: state.data.tokenImperial,\n        tokenDemocratic: state.data.tokenDemocratic,\n        multisigERC20: state.data.multisigERC20,\n        multisigERC20Address: state.data.multisigERC20Address,\n        updateERCBalances: state.data.updateBalancesERC,\n        tokenSymbol: state.data.chosenTokenSymbol\n    };\n}\n\nexport default connect(mapStateToProps)(ModalTransferERCSafely);"]},"metadata":{},"sourceType":"module"}