{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalRecoverFundsToSafeAddr.js\";\nimport React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeRecoveryForm from '../../presentationalComponents/SafeRecoveryForm.js';\nimport '../../css/Modal.css';\nimport { Transaction as Tx } from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalRecoverFundsSafely extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'amountToTransfer':\n          if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Please input a number');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'ownerPublic':\n        case 'recipientAddress':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        case 'privateKey':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Private key has to be 64 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Only alphanumeric characters are allowed');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.recoverFundsToSafeAddress(this.state.ownerPublic, this.state.recipientAddress, this.state.amountToTransfer, this.state.privateKey);\n      document.getElementById('RecoverSafely').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.recoverFundsToSafeAddress = (ownerPublic, recipientAddress, amountToTransfer, privateKey) => {\n      const web3 = this.props.web3;\n      const multisig = this.props.multisig;\n      const multisigAddress = this.props.multisigAddress;\n      const modal = this;\n      const updateBalances = this.props.updateBalances;\n      const addrFrom = this.props.address;\n      const priv = Buffer.from(privateKey, 'hex');\n      web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n        web3.eth.getGasPrice().then(gasPrice => {\n          multisig.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, amountToTransfer).estimateGas({\n            gas: gasPrice,\n            from: addrFrom\n          }, function (error, gasAmount) {\n            console.log('Current gas price: ', gasPrice);\n            console.log('Estimate of gas usage: ', gasAmount);\n            const txObject = {\n              nonce: web3.utils.toHex(txCount),\n              gasLimit: web3.utils.toHex(gasAmount),\n              // Estimate is not always correct\n              gasPrice: web3.utils.toHex(gasPrice),\n              // Pay Higher Price for testing purposes\n              to: multisigAddress,\n              data: multisig.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, amountToTransfer).encodeABI()\n            };\n            console.log(txObject); // Sign the transaction\n\n            const tx = new Tx(txObject, {\n              chain: 'ropsten',\n              hardfork: 'petersburg'\n            });\n            tx.sign(priv);\n            const serializedTransaction = tx.serialize();\n            const rawTx = '0x' + serializedTransaction.toString('hex');\n            console.log(rawTx); // Broadcast the transaction\n\n            web3.eth.sendSignedTransaction(rawTx).once('transactionHash', function (hash) {\n              console.log('Hash of transaction: ', hash);\n              modal.setState({\n                txHash: hash,\n                hashReceipt: true,\n                confirmationReceipt: false\n              });\n              modal.openModal();\n            }).once('confirmation', function (confNumber, receipt) {\n              console.log('Transaction confirmation number: ', confNumber);\n              console.log('Transaction receipt: ', receipt);\n              updateBalances(multisig);\n              modal.setState({\n                txReceipt: receipt,\n                confirmationReceipt: true,\n                hashReceipt: false\n              });\n              modal.openModal();\n            }).on('error', function (error) {\n              console.log(error);\n            });\n          });\n        });\n      });\n    };\n\n    this.state = {\n      txHash: '',\n      txReceipt: '',\n      amountToTransfer: '',\n      ownerPublic: '',\n      recipientAddress: '',\n      privateKey: '',\n      isOpen: false,\n      hashReceipt: false,\n      confirmationReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(SafeRecoveryForm, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, this.state.hashReceipt ? React.createElement(InitialTxHashComponent, {\n      transactionHash: this.state.txHash,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }) : null, this.state.confirmationReceipt ? React.createElement(ReceiptComponent, {\n      transactionHash: this.state.txReceipt.transactionHash,\n      blockHash: this.state.txReceipt.blockHash,\n      blockNumber: this.state.txReceipt.blockNumber,\n      gasUsed: this.state.txReceipt.gasUsed,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175\n      },\n      __self: this\n    }) : null));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    web3: state.data.web3,\n    address: state.data.etherAddress,\n    multisig: state.data.multisig,\n    multisigAddress: state.data.multisigAddress,\n    updateBalances: state.data.updateBalancesEther\n  };\n}\n\nexport default connect(mapStateToProps)(ModalRecoverFundsSafely);","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/multisigEtherWallet/ModalRecoverFundsToSafeAddr.js"],"names":["React","InitialTxHashComponent","ReceiptComponent","ModalContent","SafeRecoveryForm","Transaction","Tx","connect","ModalRecoverFundsSafely","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","patternMismatch","setCustomValidity","tooShort","setState","handleSubmit","recoverFundsToSafeAddress","state","ownerPublic","recipientAddress","amountToTransfer","privateKey","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","web3","multisig","multisigAddress","modal","updateBalances","addrFrom","address","priv","Buffer","from","eth","getTransactionCount","err","txCount","getGasPrice","then","gasPrice","methods","estimateGas","gas","error","gasAmount","console","log","txObject","nonce","utils","toHex","gasLimit","to","data","encodeABI","tx","chain","hardfork","sign","serializedTransaction","serialize","rawTx","toString","sendSignedTransaction","once","hash","txHash","hashReceipt","confirmationReceipt","confNumber","receipt","txReceipt","on","render","errors","n","transactionHash","blockHash","blockNumber","gasUsed","mapStateToProps","etherAddress","updateBalancesEther"],"mappings":"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","sourcesContent":["import React from 'react';\nimport InitialTxHashComponent from '../../presentationalComponents/InitialTxHashComponent.js';\nimport ReceiptComponent from '../../presentationalComponents/ReceiptComponent.js';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport SafeRecoveryForm from '../../presentationalComponents/SafeRecoveryForm.js';\nimport '../../css/Modal.css';\nimport {Transaction as Tx} from 'ethereumjs-tx';\nimport { connect } from 'react-redux';\n\nclass ModalRecoverFundsSafely extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            txHash: '',\n            txReceipt: '',\n            amountToTransfer: '',\n            ownerPublic: '',\n            recipientAddress: '',\n            privateKey: '',\n            isOpen: false,\n            hashReceipt: false,\n            confirmationReceipt:false\n        };\n    }\n\n    handleInputChange = (event) => {\n\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'amountToTransfer': \n            if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Please input a number');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break;\n        case 'ownerPublic':\n        case 'recipientAddress':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Public key has to be 42 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Public key has to start with \"0x\"');\n            } else {\n                event.target.setCustomValidity('');\n            }     \n            break;\n        case 'privateKey':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Private key has to be 64 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Only alphanumeric characters are allowed');\n            } else {\n                event.target.setCustomValidity('');\n            }\n            break;  \n        default:\n            break;\n        }\n\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.recoverFundsToSafeAddress(this.state.ownerPublic, this.state.recipientAddress, this.state.amountToTransfer, this.state.privateKey);\n        document.getElementById('RecoverSafely').reset();    \n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true\n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    recoverFundsToSafeAddress = (ownerPublic, recipientAddress, amountToTransfer, privateKey) => {\n        const web3 = this.props.web3;\n        const multisig = this.props.multisig;\n        const multisigAddress = this.props.multisigAddress;\n        const modal = this;\n        const updateBalances = this.props.updateBalances;\n        const addrFrom = this.props.address;\n        const priv = Buffer.from(privateKey, 'hex');\n\n        web3.eth.getTransactionCount(addrFrom, (err, txCount) => {\n\n            web3.eth.getGasPrice().then((gasPrice) => {\n\n                multisig.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, amountToTransfer).estimateGas({gas: gasPrice, from: addrFrom}, function(error, gasAmount) {\n                    console.log('Current gas price: ', gasPrice);\n                    console.log('Estimate of gas usage: ', gasAmount);\n                    const txObject = {\n                        nonce: web3.utils.toHex(txCount),\n                        gasLimit: web3.utils.toHex(gasAmount), // Estimate is not always correct\n                        gasPrice: web3.utils.toHex(gasPrice), // Pay Higher Price for testing purposes\n                        to: multisigAddress,\n                        data: multisig.methods.recoverFundsToSafeAddress(ownerPublic, recipientAddress, amountToTransfer).encodeABI()\n                    };\n                    console.log(txObject);\n\n                    // Sign the transaction\n                    const tx = new Tx(txObject, { chain: 'ropsten', hardfork: 'petersburg' });\n                    tx.sign(priv);\n\n                    const serializedTransaction = tx.serialize();\n                    const rawTx = '0x' + serializedTransaction.toString('hex');\n                    \n                    console.log(rawTx);\n\n                    // Broadcast the transaction\n                    web3.eth.sendSignedTransaction(rawTx)\n                    .once('transactionHash', function(hash){ \n                        console.log('Hash of transaction: ', hash);\n                        modal.setState({ \n                          txHash: hash,\n                          hashReceipt: true,\n                          confirmationReceipt: false                       \n                        });\n                        modal.openModal();\n                    })\n                    .once('confirmation', function(confNumber, receipt){ \n                        console.log('Transaction confirmation number: ', confNumber);\n                        console.log('Transaction receipt: ', receipt);\n                        updateBalances(multisig);\n                        \n                        modal.setState({ \n                          txReceipt: receipt,\n                          confirmationReceipt: true, \n                          hashReceipt: false\n                        });\n                        modal.openModal(); \n                    })\n                    .on('error', function(error){ console.log(error); });\n                });\n            });\n        });\n    } \n\n    render() {\n\n        return (\n            <span>\n                <SafeRecoveryForm \n                handleSubmit={this.handleSubmit} \n                handleInputChange={this.handleInputChange}\n                errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                closeModal={this.closeModal} \n                onKeyDown={this.onKeyDown}\n                onClickAway={this.onClickAway}\n                modalRef={n => this.modalNode = n}> \n                {this.state.hashReceipt ? \n                <InitialTxHashComponent transactionHash={this.state.txHash} />\n                : null} \n                {this.state.confirmationReceipt ?\n                <ReceiptComponent\n                transactionHash={this.state.txReceipt.transactionHash}\n                blockHash={this.state.txReceipt.blockHash}\n                blockNumber={this.state.txReceipt.blockNumber}\n                gasUsed={this.state.txReceipt.gasUsed}/>\n                : null} \n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nfunction mapStateToProps(state) {\n    return { \n        web3: state.data.web3,\n        address: state.data.etherAddress,\n        multisig: state.data.multisig,\n        multisigAddress: state.data.multisigAddress,\n        updateBalances: state.data.updateBalancesEther\n    };\n}\n\nexport default connect(mapStateToProps)(ModalRecoverFundsSafely);"]},"metadata":{},"sourceType":"module"}