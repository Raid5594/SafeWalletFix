{"ast":null,"code":"var _jsxFileName = \"/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalAllowance.js\";\nimport React from 'react';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport AllowanceFormERC from '../../presentationalComponents/AllowanceFormERC.js';\nimport '../../css/Modal.css';\n\nclass ModalTokenAllowance extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleInputChange = event => {\n      event.preventDefault();\n      const _event$target = event.target,\n            name = _event$target.name,\n            value = _event$target.value;\n\n      switch (name) {\n        case 'ownerPub':\n          if (event.target.validity.tooShort) {\n            event.target.setCustomValidity('Public key has to be 42 characters');\n          } else if (event.target.validity.patternMismatch) {\n            event.target.setCustomValidity('Public key has to start with \"0x\"');\n          } else {\n            event.target.setCustomValidity('');\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      this.setState({\n        [name]: value\n      });\n    };\n\n    this.handleSubmit = event => {\n      event.preventDefault();\n      this.checkAllowance(this.state.ownerPub, this.props.multisigERC20Address);\n      document.getElementById('AllowanceFormERC').reset();\n    };\n\n    this.openModal = () => {\n      this.setState({\n        isOpen: true\n      });\n    };\n\n    this.closeModal = () => {\n      this.setState({\n        isOpen: false\n      });\n    };\n\n    this.onKeyDown = event => {\n      return event.keyCode === 27 && this.closeModal();\n    };\n\n    this.onClickAway = event => {\n      if (this.modalNode && this.modalNode.contains(event.target)) return;\n      this.closeModal();\n    };\n\n    this.checkAllowance = (ownerPub, multisigERC20Address) => {\n      let modal = this;\n      let token = this.props.token;\n      console.log(ownerPub);\n      console.log(multisigERC20Address);\n      console.log(token.address);\n      console.log(token);\n      token.methods.allowance(ownerPub, multisigERC20Address).call({\n        from: ownerPub\n      }).then(allowance => {\n        modal.setState({\n          allowance: allowance,\n          allowanceReceipt: true\n        });\n        modal.openModal();\n      });\n    };\n\n    this.state = {\n      allowance: '',\n      ownerPub: '',\n      isOpen: false,\n      allowanceReceipt: false\n    };\n  }\n\n  render() {\n    return React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(AllowanceFormERC, {\n      handleSubmit: this.handleSubmit,\n      handleInputChange: this.handleInputChange,\n      errors: this.state.errors,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }), this.state.isOpen && React.createElement(ModalContent, {\n      closeModal: this.closeModal,\n      onKeyDown: this.onKeyDown,\n      onClickAway: this.onClickAway,\n      modalRef: n => this.modalNode = n,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, this.state.allowanceReceipt ? React.createElement(\"p\", {\n      className: \"modalTextTx\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, \"Current contract allowance is: \", this.state.allowance) : null));\n  }\n\n}\n\nexport default ModalTokenAllowance;","map":{"version":3,"sources":["/Users/Raid/test/testpApp3/SafeWalletFix/frontend/src/containerComponents/erc20/ModalAllowance.js"],"names":["React","ModalContent","AllowanceFormERC","ModalTokenAllowance","Component","constructor","props","handleInputChange","event","preventDefault","target","name","value","validity","tooShort","setCustomValidity","patternMismatch","setState","handleSubmit","checkAllowance","state","ownerPub","multisigERC20Address","document","getElementById","reset","openModal","isOpen","closeModal","onKeyDown","keyCode","onClickAway","modalNode","contains","modal","token","console","log","address","methods","allowance","call","from","then","allowanceReceipt","render","errors","n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,YAAP,MAAyB,gDAAzB;AACA,OAAOC,gBAAP,MAA6B,oDAA7B;AACA,OAAO,qBAAP;;AAEA,MAAMC,mBAAN,SAAkCH,KAAK,CAACI,SAAxC,CAAkD;AAE9CC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUnBC,iBAVmB,GAUEC,KAAD,IAAW;AAC3BA,MAAAA,KAAK,CAACC,cAAN;AAD2B,4BAEHD,KAAK,CAACE,MAFH;AAAA,YAEnBC,IAFmB,iBAEnBA,IAFmB;AAAA,YAEbC,KAFa,iBAEbA,KAFa;;AAI3B,cAAQD,IAAR;AACA,aAAK,UAAL;AACI,cAAIH,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBC,QAA1B,EAAoC;AAChCN,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,oCAA/B;AACH,WAFD,MAEO,IAAIP,KAAK,CAACE,MAAN,CAAaG,QAAb,CAAsBG,eAA1B,EAA2C;AAC9CR,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,mCAA/B;AACH,WAFM,MAEA;AACHP,YAAAA,KAAK,CAACE,MAAN,CAAaK,iBAAb,CAA+B,EAA/B;AACH;;AACD;;AACJ;AACI;AAXJ;;AAaA,WAAKE,QAAL,CAAc;AAAE,SAACN,IAAD,GAAQC;AAAV,OAAd;AACH,KA5BkB;;AAAA,SA8BnBM,YA9BmB,GA8BHV,KAAD,IAAW;AACtBA,MAAAA,KAAK,CAACC,cAAN;AACA,WAAKU,cAAL,CAAoB,KAAKC,KAAL,CAAWC,QAA/B,EAAyC,KAAKf,KAAL,CAAWgB,oBAApD;AACAC,MAAAA,QAAQ,CAACC,cAAT,CAAwB,kBAAxB,EAA4CC,KAA5C;AACH,KAlCkB;;AAAA,SAoCnBC,SApCmB,GAoCP,MAAM;AACd,WAAKT,QAAL,CAAc;AACVU,QAAAA,MAAM,EAAE;AADE,OAAd;AAGH,KAxCkB;;AAAA,SA0CnBC,UA1CmB,GA0CN,MAAM;AACf,WAAKX,QAAL,CAAc;AACVU,QAAAA,MAAM,EAAE;AADE,OAAd;AAGH,KA9CkB;;AAAA,SAgDnBE,SAhDmB,GAgDNrB,KAAD,IAAW;AACnB,aAAOA,KAAK,CAACsB,OAAN,KAAkB,EAAlB,IAAwB,KAAKF,UAAL,EAA/B;AACH,KAlDkB;;AAAA,SAoDnBG,WApDmB,GAoDJvB,KAAD,IAAW;AACrB,UAAI,KAAKwB,SAAL,IAAkB,KAAKA,SAAL,CAAeC,QAAf,CAAwBzB,KAAK,CAACE,MAA9B,CAAtB,EAA6D;AAC7D,WAAKkB,UAAL;AACH,KAvDkB;;AAAA,SAyDnBT,cAzDmB,GAyDF,CAACE,QAAD,EAAWC,oBAAX,KAAoC;AACjD,UAAIY,KAAK,GAAG,IAAZ;AACA,UAAIC,KAAK,GAAG,KAAK7B,KAAL,CAAW6B,KAAvB;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYhB,QAAZ;AACAe,MAAAA,OAAO,CAACC,GAAR,CAAYf,oBAAZ;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAA,MAAAA,KAAK,CAACI,OAAN,CAAcC,SAAd,CAAwBnB,QAAxB,EAAkCC,oBAAlC,EAAwDmB,IAAxD,CAA6D;AAAEC,QAAAA,IAAI,EAAErB;AAAR,OAA7D,EAAiFsB,IAAjF,CAAuFH,SAAS,IAAI;AAEhGN,QAAAA,KAAK,CAACjB,QAAN,CAAe;AACXuB,UAAAA,SAAS,EAAEA,SADA;AAEXI,UAAAA,gBAAgB,EAAE;AAFP,SAAf;AAIAV,QAAAA,KAAK,CAACR,SAAN;AACC,OAPL;AASH,KAzEkB;;AAEf,SAAKN,KAAL,GAAa;AACToB,MAAAA,SAAS,EAAE,EADF;AAETnB,MAAAA,QAAQ,EAAE,EAFD;AAGTM,MAAAA,MAAM,EAAE,KAHC;AAITiB,MAAAA,gBAAgB,EAAE;AAJT,KAAb;AAMH;;AAmEDC,EAAAA,MAAM,GAAG;AAEL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI,oBAAC,gBAAD;AACA,MAAA,YAAY,EAAE,KAAK3B,YADnB;AAEA,MAAA,iBAAiB,EAAE,KAAKX,iBAFxB;AAGA,MAAA,MAAM,EAAE,KAAKa,KAAL,CAAW0B,MAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ,EAMI,KAAK1B,KAAL,CAAWO,MAAX,IACA,oBAAC,YAAD;AACA,MAAA,UAAU,EAAE,KAAKC,UADjB;AAEA,MAAA,SAAS,EAAE,KAAKC,SAFhB;AAGA,MAAA,WAAW,EAAE,KAAKE,WAHlB;AAIA,MAAA,QAAQ,EAAEgB,CAAC,IAAI,KAAKf,SAAL,GAAiBe,CAJhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKC,KAAK3B,KAAL,CAAWwB,gBAAX,GACD;AAAG,MAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0CAA2D,KAAKxB,KAAL,CAAWoB,SAAtE,CADC,GAEC,IAPF,CAPJ,CADJ;AAoBH;;AAnG6C;;AAsGlD,eAAerC,mBAAf","sourcesContent":["import React from 'react';\nimport ModalContent from '../../presentationalComponents/ModalContent.js';\nimport AllowanceFormERC from '../../presentationalComponents/AllowanceFormERC.js';\nimport '../../css/Modal.css';\n\nclass ModalTokenAllowance extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            allowance: '',\n            ownerPub: '',\n            isOpen: false,\n            allowanceReceipt: false,\n        };\n    }\n\n    handleInputChange = (event) => {\n        event.preventDefault();\n        const { name, value } = event.target;\n\n        switch (name) {\n        case 'ownerPub':\n            if (event.target.validity.tooShort) {\n                event.target.setCustomValidity('Public key has to be 42 characters');\n            } else if (event.target.validity.patternMismatch) {\n                event.target.setCustomValidity('Public key has to start with \"0x\"');\n            } else {\n                event.target.setCustomValidity('');\n            }  \n            break; \n        default:\n            break;\n        }\n        this.setState({ [name]: value });\n    }\n\n    handleSubmit = (event) => {\n        event.preventDefault();\n        this.checkAllowance(this.state.ownerPub, this.props.multisigERC20Address);\n        document.getElementById('AllowanceFormERC').reset();\n    }\n  \n    openModal = () => {\n        this.setState({ \n            isOpen: true \n        });\n    };\n\n    closeModal = () => {\n        this.setState({ \n            isOpen: false\n        });\n    };\n\n    onKeyDown = (event) => {\n        return event.keyCode === 27 && this.closeModal();\n    }\n  \n    onClickAway = (event) => {\n        if (this.modalNode && this.modalNode.contains(event.target)) return;\n        this.closeModal();\n    };\n\n    checkAllowance = (ownerPub, multisigERC20Address) => {\n        let modal = this;\n        let token = this.props.token;\n        console.log(ownerPub);\n        console.log(multisigERC20Address);\n        console.log(token.address);\n        console.log(token);\n        token.methods.allowance(ownerPub, multisigERC20Address).call({ from: ownerPub }).then( allowance => {\n\n            modal.setState({ \n                allowance: allowance,\n                allowanceReceipt: true\n            });\n            modal.openModal();\n            }\n        );\n    }\n\n    render() {\n\n        return (\n            <span>\n                <AllowanceFormERC \n                handleSubmit={this.handleSubmit} \n                handleInputChange={this.handleInputChange}\n                errors={this.state.errors}/>\n                {\n                this.state.isOpen && \n                <ModalContent \n                closeModal={this.closeModal} \n                onKeyDown={this.onKeyDown}\n                onClickAway={this.onClickAway}\n                modalRef={n => this.modalNode = n}> \n                {this.state.allowanceReceipt ? \n                <p className=\"modalTextTx\">Current contract allowance is: {this.state.allowance}</p> \n                : null} \n                </ModalContent>\n                }\n            </span>\n        );\n    }\n}\n\nexport default ModalTokenAllowance;"]},"metadata":{},"sourceType":"module"}